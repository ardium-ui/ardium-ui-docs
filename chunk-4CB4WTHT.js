import{$ as pe,E as U,F as V,G as j,H as N,I as W,J as _,K as Q,L as G,M as $,N as J,O as X,P as Z,Q as Y,R as ee,S as te,T as ie,U as ne,V as ae,W as oe,X as re,Y as se,Z as le,_ as de,aa as me,ba as ce,ca as ue,da as he,ea as ye,fa as ge,ga as xe,ha as ve,ia as Se,j as Dt,ja as be,k as w,ka as Te,l as m,m as k,n as c,o as K,p as g,r as z,s as S,t as f,u,v as b,w as h}from"./chunk-5FDIALMT.js";import{Ba as e,C as E,Ea as L,Fa as R,Ga as B,I as O,Kb as P,L as l,Lb as q,T as p,Wb as fe,aa as r,ja as i,ka as t,la as s,sa as H,ta as F}from"./chunk-IWXHOVAQ.js";import{a as A,b as D,d as At}from"./chunk-FDERIQAA.js";var I=At(Dt());var Ee={name:"Click outisde",modules:[{name:"ArdiumClickOutsideModule",exports:"ArdiumClickOutsideDirective"}],directives:[{name:"ArdiumClickOutsideDirective",description:"Detects when the user clicks or touches outside a given element.",exportedFrom:"ArdiumClickOutsideModule",selector:"[ardClickOutside]",outputs:[{name:"ardClickOutside",description:"Fired when the user clicks or touches outside of a given element.",type:"MouseEvent"}]}]};var we=(()=>{class n{constructor(){this.ClickOutsideExampleData=U}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["click-outside-page"]],decls:44,vars:2,consts:[["pageTitle","Click outisde"],["moduleName","ArdiumClickOutsideModule"],["heading","Outside click counter",3,"data","isCodeShown"],["href","https://developer.mozilla.org/en-US/docs/Web/API/Node/contains","target","_blank"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2,"Directive for detecting when the user clicks outside a given element."),t()(),s(3,"app-prerequisites",1),i(4,"section")(5,"app-h2"),e(6,"Listening to the event"),t(),i(7,"p")(8,"code"),e(9,"ClickOutisdeDirective"),t(),e(10," provides an event emitter "),i(11,"code"),e(12,"(ardClickOutside)"),t(),e(13," that emits a click event or a touch event every time the user clicks "),i(14,"i"),e(15,"outside"),t(),e(16," of a given element. "),t(),i(17,"p"),e(18," Internally the directive listens to "),i(19,"code"),e(20,"mousedown"),t(),e(21," and "),i(22,"code"),e(23,"touchstart"),t(),e(24," events on the whole "),i(25,"code"),e(26,"document"),t(),e(27," element. In that case stopping event propagation might not prove useful in standard circumstances. If the event needs to be stopped from firing, define an event listener with "),i(28,"code"),e(29,"capture"),t(),e(30," option set to "),i(31,"code"),e(32,"true"),t(),e(33," and stop it there. "),t(),s(34,"app-code-example",2),t(),i(35,"section")(36,"app-h2"),e(37,"Performance considerations"),t(),i(38,"p"),e(39," The directive internally uses "),i(40,"a",3)(41,"code"),e(42,"Node.contains()"),t()(),e(43,", which, when executed repeatedly on particularly large DOM trees, may lead to performance issues. It's recommended to avoid using the directive if more than 30 clicks per second are expected, as performance may degrade depending on the user's device. For most cases with fewer interactions, no significant issues should arise. "),t()()),a&2&&(l(34),r("data",o.ClickOutsideExampleData)("isCodeShown",!1))},dependencies:[f,h,u,b,c,m],encapsulation:2})}}return n})();var ke={name:"Coercion",functions:[{name:"coerceArrayProperty",description:'Coerces a value to an array of trimmed non-empty strings. Any input that is not an array, <code>null</code> or <code>undefined</code> will be turned into a string using <code>String()</code> and split into an array with the given separator. <code>null</code>, <code>undefined</code>, and <code>""</code> will result in an empty array.',returnType:"string[]",params:[{name:"value",description:"The value to be coerced.",type:"any",required:!0},{name:"separator",description:"The separator used to split the string with.",type:"string | RegExp",required:!1,default:'","'}]},{name:"coerceBooleanProperty",description:"Coerces a data-bound value (typically a string) to a boolean.",returnType:"boolean",params:[{name:"value",description:"The value to be coerced.",required:!0,type:"any"}]},{name:"coerceDateProperty",description:"Coerces a data-bound value (typically a string) to a Date.",returnType:"Date | T",typeParams:[{name:"T",description:"The type of the fallback value to be used.",required:!1,type:"any",default:"Infered from the <code>fallback</code> parameter."}],params:[{name:"value",description:"The value to be coerced.",required:!0,type:"any"},{name:"fallback",description:"The value to use if the coercion fails.",required:!0,type:"T (infered)"}]},{name:"coerceNumberProperty",description:"Coerces a data-bound value (typically a string) to a number.",overloads:[{description:"Coerces a data-bound value (typically a string) to a number.",returnType:"number | undefined",params:[{name:"value",description:"The value to be coerced.",required:!0,type:"any"}]},{description:"Coerces a data-bound value (typically a string) to a number.",returnType:"number | undefined",typeParams:[{name:"D",description:"The type of the fallback value to be used.",required:!1,type:"any",default:"Infered from the <code>fallback</code> parameter."}],params:[{name:"value",description:"The value to be coerced.",required:!0,type:"any"},{name:"fallback",description:"The value to use if the coercion fails.",required:!0,type:"D (infered)"}]}]}]};var Ce=(()=>{class n{constructor(){this.CoercionBooleanExampleData=V,this.CoercionNumberExampleData=N,this.CoercionDateExampleData=j,this.CoercionUsefulnessExampleData=W,this.arrayExampleCode=`// input         ->  output
null             ->  []
""               ->  []
"a,b,c"          ->  ["a", "b", "c"]
"1,2,3"          ->  ["1", "2", "3"]
["a", "b ", ""]  ->  ["a", "b"]
[1, [2, 3]]      ->  ["1", "2,3"]`}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["coercion-page"]],decls:91,vars:5,consts:[["pageTitle","Coercion"],["heading","Boolean coercion","initialTab","my-button.component.ts",3,"data"],["heading","Number coercion","initialTab","my-button.component.ts",3,"data"],["heading","Date coercion","initialTab","my-calendar.component.ts",3,"data"],["language","typescript","styled","",3,"code"],["heading","Coercion usefulness examples","nonExpandable","",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2,"Utility functions for coercing "),i(3,"code"),e(4,"@Input"),t(),e(5,"s into specific types."),t()(),i(6,"section")(7,"app-h2"),e(8,"Coercing boolean values"),t(),i(9,"p")(10,"code"),e(11,"coerceBooleanProperty"),t(),e(12," function provides a way to coerce any value into a boolean."),t(),i(13,"p"),e(14," Almost any value provided will turn into "),i(15,"code"),e(16,"true"),t(),e(17,". Only the values "),i(18,"code"),e(19,"undefined"),t(),e(20,", "),i(21,"code"),e(22,"null"),t(),e(23,", and the string "),i(24,"code"),e(25,'"false"'),t(),e(26," will result in "),i(27,"code"),e(28,"false"),t(),e(29,". "),t(),s(30,"app-code-example",1),t(),i(31,"section")(32,"app-h2"),e(33,"Coercing number values"),t(),i(34,"p")(35,"code"),e(36,"coerceNumberProperty"),t(),e(37," function provides a way to coerce any value into a number. A fallback value can be provided, to use when the coercion fails. "),t(),i(38,"p"),e(39," This function will try to convert the provided value into a number using the "),i(40,"code"),e(41,"Number()"),t(),e(42," function. If the result is "),i(43,"code"),e(44,"NaN"),t(),e(45,", the fallback value will be used. "),t(),i(46,"p"),e(47,"By default, the fallback value is "),i(48,"code"),e(49,"undefined"),t(),e(50,", but any value can be used."),t(),s(51,"app-code-example",2),t(),i(52,"section")(53,"app-h2"),e(54,"Coercing date values"),t(),i(55,"p")(56,"code"),e(57,"coerceDateProperty"),t(),e(58," function provides a way to coerce any value into a Date object. A fallback value can be provided, to use when the coercion fails. "),t(),i(59,"p"),e(60," This function will try to convert the provided value into a Date object using its constructor. If the result is not a valid date, the fallback value will be used. There is also a special case: if the value is "),i(61,"code"),e(62,'"now"'),t(),e(63," (case insensitive), it will be coerced into the current date. "),t(),i(64,"p"),e(65,"With this function the fallback must always be specified, and can be any value."),t(),s(66,"app-code-example",3),t(),i(67,"section")(68,"app-h2"),e(69,"Coercing array values"),t(),i(70,"p")(71,"code"),e(72,"coerceArrayProperty"),t(),e(73," function provides a way to coerce any value into an array of strings, with the option to specify the separator to be used (defaults to a comma). "),t(),i(74,"p"),e(75," This function will try to convert the provided value into an array. If the value is already an array, all its values will be converted into strings and trimmed. If the value is a string, it will be split using the provided separator, and all resulting strings will be trimmed. Any empty strings will be removed. "),t(),i(76,"p"),e(77,"Providing "),i(78,"code"),e(79,"undefined"),t(),e(80,", "),i(81,"code"),e(82,"null"),t(),e(83,", or an empty string will result in an empty array."),t(),s(84,"app-code",4),t(),i(85,"section")(86,"app-h2"),e(87,"Why use coercion?"),t(),i(88,"p"),e(89," Coercion is mainly used to reduce the amount of code that needs to be typed. It simplifies how input porperty values can be passed, allowing for strings to be used instead of proper types. A few examples can be found below. "),t(),s(90,"app-code-example",5),t()),a&2&&(l(30),r("data",o.CoercionBooleanExampleData),l(21),r("data",o.CoercionNumberExampleData),l(15),r("data",o.CoercionDateExampleData),l(18),r("code",o.arrayExampleCode),l(6),r("data",o.CoercionUsefulnessExampleData))},dependencies:[w,f,h,u,c,m],encapsulation:2})}}return n})();var Ae={name:"Array signal",functions:[{name:"arraySignal",description:"Creates a writable, reactive array signal with convenient, immutable array manipulation methods.",params:[{name:"initialValue",type:"T[]",description:"Initial value for the array.",default:"[]",required:!1}],typeParams:[{name:"T",description:"The type of each element in the signal's array.",type:"any"}],returnType:"WritableArraySignal<T>"}],interfaces:[{name:"ArraySignal<T>",description:"A read-only array signal with non-mutating methods.",methods:[{name:"()",description:"Reactively returns the array signal's current value.",returnType:"T"},{name:"isEmpty",description:"Reactively returns `true` if the array is empty.",returnType:"boolean"}],typeParams:[{name:"T",description:"The type of each element in the signal's array.",type:"any"}]},{name:"WritableArraySignal<T>",description:"A writable array signal with mutating and non-mutating methods.",methods:[{name:"()",description:"Reactively returns the array signal's current value.",returnType:"T"},{name:"isEmpty",description:"Reactively returns `true` if the array is empty.",returnType:"boolean"},{name:"asReadonly",description:"Returns a read-only version of the array signal.",returnType:"ArraySignal<T>"},{name:"fill",description:"Fills all the elements of the array signal from a start index to an end index with a static value.",params:[{name:"value",type:"T",description:"The value to fill the array with."},{name:"start",type:"number",description:"The start index (inclusive). Defaults to 0.",default:"0",required:!1},{name:"end",type:"number",description:"The end index (exclusive). Defaults to array length.",default:"array length",required:!1}],returnType:"void"},{name:"filter",description:"Filters the array based on a predicate function and updates the signal with the filtered result.",params:[{name:"predicate",type:"(value: T, index: number, array: T[]) => boolean",description:"Function to test each element of the array, should return `true` to keep the element."}],returnType:"void"},{name:"map",description:"Applies a mapping function to each element in the array and updates the signal with the result.",params:[{name:"mapFn",type:"(value: T, index: number, array: T[]) => T",description:"Function that produces an element of the new array. Receives the current element, index, and the array."}],returnType:"void"},{name:"pop",description:"Removes the last element from the array and returns it. Updates the signal.",returnType:"T | undefined"},{name:"push",description:"Appends new elements to the end of the array and returns the new length. Updates the signal.",params:[{name:"items",type:"T[]",description:"The elements to add."}],returnType:"number"},{name:"reverse",description:"Reverses the order of the elements in the array and updates the signal.",returnType:"void"},{name:"set",description:"Replaces the entire array with a new array value.",params:[{name:"value",type:"T[]",description:"The new array value."}],returnType:"void"},{name:"setAt",description:"Replaces the item at the given index with the new item.",params:[{name:"index",type:"number",description:"The index where the item should be replaced."},{name:"newItem",type:"T",description:"The new item to be set at the given index."}],returnType:"void"},{name:"shift",description:"Removes the first element from the array and returns it. Updates the signal.",returnType:"T | undefined"},{name:"sort",description:"Sorts the elements of the array in place and updates the signal.",params:[{name:"compareFn",type:"(a: T, b: T) => number",description:"Specifies a function that defines the sort order."}],returnType:"void"},{name:"splice",description:"Changes the contents of the array by removing or replacing existing elements and/or adding new elements.",params:[{name:"start",type:"number",description:"The index at which to start changing the array."},{name:"deleteCount",type:"number",description:"The number of elements to remove."},{name:"items",type:"T[]",description:"Elements to add to the array."}],returnType:"T[]"},{name:"unshift",description:"Adds one or more elements to the beginning of the array and returns the new length. Updates the signal.",params:[{name:"items",type:"T[]",description:"The elements to add."}],returnType:"number"},{name:"update",description:"Updates the array signal based on a provided update function.",params:[{name:"updateFn",type:"(value: T[]) => T[]",description:"A function that receives the current array and returns the updated array."}],returnType:"void"},{name:"updateAt",description:"Updates the item at the given index by applying the update function.",params:[{name:"index",type:"number",description:"The index where the item should be updated."},{name:"updateFn",type:"(current: T) => T",description:"The function that will update the current item at the given index."}],returnType:"void"}],typeParams:[{name:"T",description:"The type of each element in the signal's array.",type:"any"}]}]};var De=(()=>{class n{constructor(){this.ArraySignalBasicExampleData=_}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["array-signal-page"]],decls:54,vars:2,consts:[["pageTitle","Array Signal"],["heading","Basic usage of arraySignal","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Array Signal"),t(),e(5," is a reactive, mutable signal tailored for working with arrays in Angular. It provides a suite of familiar JavaScript array methods with reactivity baked in, enabling seamless updates across the application. "),t()(),i(6,"section")(7,"app-h2"),e(8,"Array signal methods"),t(),i(9,"p"),e(10," The writable array signal includes methods such as "),i(11,"code"),e(12,"push()"),t(),e(13,", "),i(14,"code"),e(15,"pop()"),t(),e(16,", "),i(17,"code"),e(18,"map()"),t(),e(19,", "),i(20,"code"),e(21,"filter()"),t(),e(22,", "),i(23,"code"),e(24,"splice()"),t(),e(25,", "),i(26,"code"),e(27,"setAt()"),t(),e(28,", and "),i(29,"code"),e(30,"updateAt()"),t(),e(31," that modify the array by replacing it with a new cloned version. This ensures optimal signal reactivity without mutating the original reference. "),t(),i(32,"p"),e(33," Every method triggers Angular's reactivity engine, including methods that would normally not change the array, like "),i(34,"code"),e(35,"map()"),t(),e(36," or "),i(37,"code"),e(38,"filter()"),t(),e(39,". Those methods update the signal's value as well, and cannot be chained like standard array methods. "),t(),i(40,"p"),e(41," For a list of all methods, go to the Api tab. "),t(),s(42,"app-code-example",1),t(),i(43,"section")(44,"app-h2"),e(45,"Read-only array signal"),t(),i(46,"p"),e(47," The "),i(48,"code"),e(49,"asReadonly()"),t(),e(50," method creates a non-writable version of the array signal. This version disables all mutation methods while retaining access to properties like "),i(51,"code"),e(52,"isEmpty"),t(),e(53,", ensuring safe and consistent usage where mutations are not allowed. "),t()()),a&2&&(l(42),r("data",o.ArraySignalBasicExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var Re={name:"Counter signal",functions:[{name:"counterSignal",description:"Creates a writable, reactive counter signal with convenient helpers and computed queries.",params:[{name:"initial",type:"number",description:"The initial value of the counter.",default:"0",required:!1}],returnType:"WritableCounterSignal"}],interfaces:[{name:"CounterSignal",description:"A read-only counter signal with computed helpers.",methods:[{name:"()",description:"Reactively returns the current value of the counter signal.",returnType:"number"},{name:"isReset",description:"Reactively returns `true` if the counter has not changed since last reset.",returnType:"boolean"},{name:"value",description:"Returns the current counter value (alias for directly calling the signal, eg. <code>mySignal()</code>).",returnType:"number"}]},{name:"WritableCounterSignal",description:"A writable counter signal with mutation helpers and computed queries.",methods:[{name:"()",description:"Reactively returns the current value of the counter signal.",returnType:"number"},{name:"isReset",description:"Reactively returns `true` if the counter has not changed since last reset.",returnType:"boolean"},{name:"value",description:"Returns the current counter value (alias for directly calling the signal, eg. <code>mySignal()</code>).",returnType:"number"},{name:"asReadonly",description:"Returns a read-only version of the counter signal.",returnType:"CounterSignal"},{name:"increment",description:"Increments the counter by a specified value.",params:[{name:"amount",type:"number",description:"The value to increment by. Default is 1.",default:"1",required:!1}],returnType:"void"},{name:"decrement",description:"Decrements the counter by a specified value.",params:[{name:"amount",type:"number",description:"The value to decrement by. Default is 1.",default:"1",required:!1}],returnType:"void"},{name:"set",description:"Sets the counter to a specific value.",params:[{name:"value",type:"number",description:"The value to set the counter to."}],returnType:"void"},{name:"update",description:"Updates the counter using an updater function.",params:[{name:"updater",type:"(current: number) => number",description:"A function that receives the current value and returns the new value."}],returnType:"void"},{name:"reset",description:"Resets the counter to its base (initial) value. The base value can be changed using <code>setBaseValue</code>.",returnType:"void"},{name:"setBaseValue",description:"Sets the base value to be used when resetting the counter.",params:[{name:"value",type:"number",description:"The new base value."}],returnType:"void"}]}]};var Pe=(()=>{class n{constructor(){this.CounterSignalBasicExampleData=Q}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["counter-signal-page"]],decls:80,vars:2,consts:[["pageTitle","Counter Signal"],["heading","Basic usage of counterSignal","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Counter Signal"),t(),e(5," is a reactive signal designed to handle numeric values, providing convenient mutation helpers for incrementing, decrementing, and resetting the counter. It also exposes computed properties to query the counter's state. "),t()(),i(6,"section")(7,"app-h2"),e(8,"Counter signal methods"),t(),i(9,"p"),e(10," The writable counter signal exposes methods for mutating the counter value, including "),i(11,"code"),e(12,"increment()"),t(),e(13,", "),i(14,"code"),e(15,"decrement()"),t(),e(16,", "),i(17,"code"),e(18,"set()"),t(),e(19,", and "),i(20,"code"),e(21,"update()"),t(),e(22,". These methods enable reactive updates to the counter and automatically trigger Angular's reactivity engine. "),t(),i(23,"p"),e(24," The "),i(25,"code"),e(26,"increment()"),t(),e(27," and "),i(28,"code"),e(29,"decrement()"),t(),e(30," methods allow you to modify the counter by a specified amount, with the default value being 1. The "),i(31,"code"),e(32,"set()"),t(),e(33," method allows setting the counter to an explicit value, while "),i(34,"code"),e(35,"update()"),t(),e(36," lets you modify the counter using an updater function. "),t(),s(37,"app-code-example",1),t(),i(38,"section")(39,"app-h2"),e(40,"Resetting and base value"),t(),i(41,"p"),e(42," The counter includes a "),i(43,"code"),e(44,"reset()"),t(),e(45," method that resets the counter back to its initial value. The base value can be customized using the "),i(46,"code"),e(47,"setBaseValue()"),t(),e(48," method, which allows defining a new initial value for the counter. "),t(),i(49,"p"),e(50," Whenever the counter is reset, the "),i(51,"code"),e(52,"isReset"),t(),e(53," property is updated to "),i(54,"code"),e(55,"true"),t(),e(56,". "),i(57,"code"),e(58,"isReset"),t(),e(59," will change to "),i(60,"code"),e(61,"false"),t(),e(62," after any update to the signal value and will only change back to "),i(63,"code"),e(64,"true"),t(),e(65," after the signal is reset again. "),t()(),i(66,"section")(67,"app-h2"),e(68,"Read-only counter signal"),t(),i(69,"p"),e(70," The "),i(71,"code"),e(72,"asReadonly()"),t(),e(73," method provides a read-only version of the counter signal. This version disables all mutation methods and provides access to the read functions "),i(74,"code"),e(75,"isReset()"),t(),e(76," and "),i(77,"code"),e(78,"value()"),t(),e(79,", ensuring that external code can observe the counter value without modifying it. "),t()()),a&2&&(l(37),r("data",o.CounterSignalBasicExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var qe={name:"Debounced signal",interfaces:[{name:"DebouncedSignal",extends:"WritableSignal<T>",typeParams:[{name:"T",type:"any",description:"The type of the value to be stored.",required:!1,default:"implicit type based on the initial value"}],properties:[{name:"debounceTime",description:"The debounce period of the signal.",type:"number"}]}],functions:[{name:"debouncedSignal",description:"Creates a <code>WritableSignal</code> that delays updates to its value based on a specified debounce time.",returnType:"QueryParamSignal<T>",typeParams:[{name:"T",type:"any",description:"The type of the value to be stored.",required:!1,default:"implicit type based on the initial value"}],params:[{name:"initialValue",type:"T | null",description:"The initial value for the signal.",required:!0},{name:"debounceTime",type:"number",description:"The debounce period, in milliseconds.",required:!0}]}]};var Me=(()=>{class n{constructor(){this.DebouncedSignalExampleData=G}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["debounced-signal-page"]],decls:20,vars:1,consts:[["pageTitle","Debounced Signal"],["src","/ardium-ui-docs/assets/debounced.svg","alt","Illustration visualizing the debounced signal value handling"],["heading","Basic Debounced Signal","initialTab","ts",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Debounced Signal"),t(),e(5," delays updates to its value, applying them only after a specified period of inactivity. This is useful for reducing excessive signal updates in response to rapid input changes. "),t(),i(6,"p"),e(7," It ensures only the latest value is set after the debounce time elapses, making it ideal for user input or search filtering. "),t()(),i(8,"section")(9,"app-h2"),e(10,"Debounce Mechanism"),t(),i(11,"p"),e(12," The signal takes an initial value and debounce time (ms). Updates are held and applied only if no new change occurs within that time. "),t(),i(13,"p"),e(14," The debounce interval can be checked using the read-only "),i(15,"code"),e(16,"debounceTime"),t(),e(17," property. "),t(),s(18,"img",1)(19,"app-code-example",2),t()),a&2&&(l(19),r("data",o.DebouncedSignalExampleData))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var Ie={name:"Map signal",functions:[{name:"mapSignal",description:"Creates a writable, reactive Map signal with full Map-like API and helpers.",params:[{name:"initialValue",type:"Iterable<[K, V]>",description:"Initial map contents, as entries or another Map.",default:"[]",required:!1}],typeParams:[{name:"K",type:"any",description:"The type of keys in the map."},{name:"V",type:"any",description:"The type of values in the map."}],returnType:"WritableMapSignal<K, V>"}],interfaces:[{name:"MapSignal<K, V>",description:"A read-only map signal with non-mutating methods.",methods:[{name:"()",description:"Reactively returns the current map instance.",returnType:"Map<K, V>"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the map is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the size of the map.",returnType:"number"},{name:"get",description:"Reactively gets the value for a key, or <code>undefined</code>.",params:[{name:"key",type:"K",description:"The key to retrieve the value for."}],returnType:"V | undefined"},{name:"has",description:"Reactively checks if a key exists in the map.",params:[{name:"key",type:"K",description:"The key to check for."}],returnType:"boolean"},{name:"entriesArray",description:"Reactively returns an array of [key, value] entries.",returnType:"[K, V][]"},{name:"keysArray",description:"Reactively returns an array of keys.",returnType:"K[]"},{name:"valuesArray",description:"Reactively returns an array of values.",returnType:"V[]"}],typeParams:[{name:"K",type:"any",description:"The type of keys in the map."},{name:"V",type:"any",description:"The type of values in the map."}]},{name:"WritableMapSignal<K, V>",description:"A writable map signal with mutating and non-mutating methods.",methods:[{name:"()",description:"Returns the current map instance.",returnType:"Map<K, V>"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the map is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the size of the map.",returnType:"number"},{name:"get",description:"Reactively gets the value for a key, or <code>undefined</code>.",params:[{name:"key",type:"K",description:"The key to retrieve the value for."}],returnType:"V | undefined"},{name:"has",description:"Reactively checks if a key exists in the map.",params:[{name:"key",type:"K",description:"The key to check for."}],returnType:"boolean"},{name:"entriesArray",description:"Reactively returns an array of [key, value] entries.",returnType:"[K, V][]"},{name:"keysArray",description:"Reactively returns an array of keys.",returnType:"K[]"},{name:"valuesArray",description:"Reactively returns an array of values.",returnType:"V[]"},{name:"asReadonly",description:"Returns a read-only version of the map signal.",returnType:"MapSignal<K, V>"},{name:"setKey",description:"Sets a value for the specified key.",params:[{name:"key",type:"K",description:"The key to set."},{name:"value",type:"V",description:"The value to associate with the key."}],returnType:"void"},{name:"delete",description:"Deletes a key from the map. Returns <code>true</code> if a value was removed.",params:[{name:"key",type:"K",description:"The key to delete."}],returnType:"boolean"},{name:"clear",description:"Clears the map.",returnType:"void"},{name:"setMap",description:"Replaces the map with a new map.",params:[{name:"value",type:"Map<K, V>",description:"The new map instance to replace the current map."}],returnType:"void"},{name:"set",description:"Alias of <code>setMap()</code>.",params:[{name:"value",type:"Map<K, V>",description:"The new map instance to replace the current map."}],returnType:"void"},{name:"update",description:"Updates the map using an update function.",params:[{name:"updateFn",type:"(current: Map<K, V>) => Map<K, V>",description:"Function that receives the current map and returns a new map."}],returnType:"void"},{name:"updateAt",description:"Updates the value for a key using the provided update function if the key exists.",params:[{name:"key",type:"K",description:"The key to update."},{name:"updateFn",type:"(current: V) => V",description:"The function to apply to the current value."}],returnType:"void"}],typeParams:[{name:"K",type:"any",description:"The type of keys in the map."},{name:"V",type:"any",description:"The type of values in the map."}]}]};var Oe=(()=>{class n{constructor(){this.MapSignalBasicExampleData=$}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["map-signal-page"]],decls:77,vars:2,consts:[["pageTitle","Map Signal"],["heading","Basic usage of mapSignal","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Map Signal"),t(),e(5," is a reactive signal designed to work with JavaScript `Map` objects. It offers a full Map-like API, exposing methods for updating the value, allowing seamless and fully reactive manipulation of key-value pairs. "),t()(),i(6,"section")(7,"app-h2"),e(8,"Map Signal Methods"),t(),i(9,"p"),e(10," The writable map signal includes several methods for manipulating the map, such as "),i(11,"code"),e(12,"setKey()"),t(),e(13,", "),i(14,"code"),e(15,"delete()"),t(),e(16,", "),i(17,"code"),e(18,"clear()"),t(),e(19,", and "),i(20,"code"),e(21,"update()"),t(),e(22,". Each method works reactively, creating a new Map on mutation to maintain immutability and reactiveness. "),t(),i(23,"p"),e(24," The "),i(25,"code"),e(26,"setKey()"),t(),e(27," method sets a value for a specific key, while "),i(28,"code"),e(29,"delete()"),t(),e(30," removes a key-value pair. The "),i(31,"code"),e(32,"update()"),t(),e(33," method allows for updating the map with an updater function, and "),i(34,"code"),e(35,"clear()"),t(),e(36," resets the map to an empty state. "),t(),s(37,"app-code-example",1),t(),i(38,"section")(39,"app-h2"),e(40,"Computed properties"),t(),i(41,"p"),e(42,"The Map Signal includes several reactive computed properties that reflect the current state of the Map:"),t(),i(43,"ul")(44,"li")(45,"code"),e(46,"isEmpty"),t(),e(47,": Returns "),i(48,"code"),e(49,"true"),t(),e(50," if the map is empty."),t(),i(51,"li")(52,"code"),e(53,"size"),t(),e(54,": Returns the size of the map."),t(),i(55,"li")(56,"code"),e(57,"entriesArray"),t(),e(58,": Returns an array of [key, value] entries."),t(),i(59,"li")(60,"code"),e(61,"keysArray"),t(),e(62,": Returns an array of keys."),t(),i(63,"li")(64,"code"),e(65,"valuesArray"),t(),e(66,": Returns an array of values."),t()(),i(67,"p"),e(68," These computed properties are automatically updated whenever the map changes and can be used to track the current state of the map reactively. "),t()(),i(69,"section")(70,"app-h2"),e(71,"Read-only map signal"),t(),i(72,"p"),e(73," The "),i(74,"code"),e(75,"asReadonly()"),t(),e(76," method provides a read-only version of the map signal. This version disables all mutation methods and retains access to the non-mutating methods and computed properties, ensuring safe access to the map without the ability to modify it. "),t()()),a&2&&(l(37),r("data",o.MapSignalBasicExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var He={name:"Persistent signal",interfaces:[{name:"PersistentSignal",extends:"WritableSignal<T>",typeParams:[{name:"T",type:"any",description:"The prefered type of the signal. Should only be used if the signal is supposed to be serializable.",required:!1,default:"implicit type based on the initial value"}],properties:[{name:"method",description:"The method of persistent storage.",type:"PersistentStorageMethod"},{name:"key",description:"The key used to persist the value under.",type:"string"}],methods:[{name:"clear()",description:"Sets the signal value to <code>null</code> and removes the value from the persistent storage.",returnType:"void"}]},{name:"PersistentSignalOptions",description:"The object containing the options when creating a persistent signal.",typeParams:[{name:"T",type:"any",description:"The prefered type of the signal. Should only be used if the signal is supposed to be serializable.",required:!1,default:"implicit type based on the initial value"}],properties:[{name:"name",type:"string",description:"The name of the key to store the value under.</p><p>Required."},{name:"method",type:"PersistentStorageMethod",description:"The type of persistent storage to use.</p><p>Required."},{name:"expires",type:"Date | string | undefined",description:"The expiry date of the cookie in UTC date string format. Only used if the storage method is set to cookies, otherwise ignored."},{name:"maxAge",type:"number | undefined",description:"The cookie's maximum age in seconds. Only used if the storage method is set to cookies, otherwise ignored."},{name:"path",type:"string | undefined",description:"The cookie's path attribute. Only used if the storage method is set to cookies, otherwise ignored."},{name:"serialize",type:"(value: T | null) => string | null",description:"The function to use to serialize the value (prefered type -> string). If used, the <code>deserialize</code> function has to be specified as well."},{name:"deserialize",type:"(value: string) => T | null",description:"The function to use to deserialize the value (string -> prefered type). If used, the <code>serialize</code> function has to be specified as well."}]}],functions:[{name:"persistentSignal",description:"Creates a <code>WritableSignal</code> that persists its value using the specified storage method.",returnType:"PersistentSignal<T>",typeParams:[{name:"T",type:"any",description:"The prefered type of the signal. Should only be used if the signal is supposed to be serializable.",required:!1,default:"implicit type based on the initial value"}],params:[{name:"initialValue",type:"T | null",description:"The initial value for the signal. Will only be used if there is no value in the persistent storage.",required:!0},{name:"options",type:"PersistentSignalOptions<T>",description:"The configuration options for the signal.",required:!0}]}],enums:[{name:"PersistentStorageMethod",description:"An object-based enum containing the available types of persistent storage used by the persistent signal.",definition:`export const PersistentStorageMethod = {
  Cookies: 'cookies',
  LocalStorage: 'local-storage',
  SessionStorage: 'session-storage',
} as const;
export type PersistentStorageMethod = (typeof PersistentStorageMethod)[keyof typeof PersistentStorageMethod];`}]};var Fe={name:"Persistent signal",exceptions:[{name:"persistentSignal",exceptions:[{code:"DKT-FT3000",exceptionText:"Both serialize and deserialize must either be both defined or both undefined.",description:["This exceptions is raised if a signal's options object contains only <code>serialize</code> or only <code>deserialize</code> function definitions.","For the signal to work properly, both <code>serialize</code> and <code>deserialize</code> must be defined."]},{code:"DKT-FT3001",exceptionText:"Non-string initial values are only allowed for serializable signals. Define serialization options.",description:["This exceptions is raised if a non-serializable signal is given an initial value other than a string or <code>null</code>","To fix this issue either define the serialization options or change the initial value to a string or <code>null</code>"]}]}]};var Le=(()=>{class n{constructor(){this.PersistentSignalExampleData=X,this.PersistentSignalLocalStorageExampleData=Z,this.PersistentSignalCookiesExampleData=J,this.PersistentSignalSerializationExampleData=Y}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["persistent-signal-page"]],decls:70,vars:4,consts:[["pageTitle","Persistent Signal"],["heading","Basic Persistent Signal","initialTab","ts",3,"data"],["heading","Persistent Signal Using Local/Session Storage","initialTab","ts",3,"data"],["href","https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie#write_a_new_cookie","target","_blank"],["initialTab","ts","heading","Persistent Signal Using Cookies",3,"data"],["heading","Persistent Signal with Serialization",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Persistent Signal"),t(),e(5," provides a way to create a "),i(6,"code"),e(7,"WritableSignal"),t(),e(8," that syncs its value with local storage, session storage, or cookies. This enables signal state persistence across page reloads or sessions. "),t(),i(9,"p"),e(10," It supports custom serialization, allowing storage of non-string values. The signal reads the initial value from storage or initializes it if not found, and keeps the storage in sync with any updates. "),t()(),i(11,"section")(12,"app-h2"),e(13,"Core Behavior"),t(),i(14,"p"),e(15," The signal synchronizes with the chosen storage method\u2014local storage, session storage, or cookies\u2014immediately on initialization and with every update. The selected method can be accessed via the read-only "),i(16,"code"),e(17,"method"),t(),e(18," property. "),t(),i(19,"p"),e(20," A "),i(21,"code"),e(22,"clear()"),t(),e(23," method is available to reset the signal to "),i(24,"code"),e(25,"null"),t(),e(26," and remove the storage entry. "),t(),s(27,"app-code-example",1),t(),i(28,"section")(29,"app-h2"),e(30,"Local Storage and Session Storage"),t(),i(31,"p"),e(32," Using local or session storage requires only the key name. No extra configuration is needed. "),t(),s(33,"app-code-example",2),t(),i(34,"section")(35,"app-h2"),e(36,"Cookies"),t(),i(37,"p"),e(38," When using cookies, optional settings can control cookie behavior: "),t(),i(39,"ul")(40,"li")(41,"code"),e(42,"expires"),t(),e(43,": Sets expiry as a Date or UTC string."),t(),i(44,"li")(45,"code"),e(46,"maxAge"),t(),e(47,": Maximum lifetime in seconds."),t(),i(48,"li")(49,"code"),e(50,"path"),t(),e(51,": Scope of the cookie path."),t()(),i(52,"p"),e(53," Additional cookie options are detailed in the "),i(54,"a",3),e(55,"MDN documentation"),t(),e(56,". "),t(),s(57,"app-code-example",4),t(),i(58,"section")(59,"app-h2"),e(60,"Serialization and Deserialization"),t(),i(61,"p"),e(62," Custom serialization functions can be provided to support storing non-string types. "),i(63,"code"),e(64,"serialize()"),t(),e(65," transforms a value to a string, while "),i(66,"code"),e(67,"deserialize()"),t(),e(68," converts it back. "),t(),s(69,"app-code-example",5),t()),a&2&&(l(27),r("data",o.PersistentSignalExampleData),l(6),r("data",o.PersistentSignalLocalStorageExampleData),l(24),r("data",o.PersistentSignalCookiesExampleData),l(12),r("data",o.PersistentSignalSerializationExampleData))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var Be={name:"Query param signals",interfaces:[{name:"QueryParamSignal",extends:"WritableSignal<T>",typeParams:[{name:"T",type:"any",description:"The prefered type of the signal. Should only be used if the signal is supposed to be serializable.",required:!1,default:"implicit type based on the initial value"}],properties:[{name:"paramName",description:"The name of the URL query param to be used.",type:"string"}],methods:[{name:"clear()",description:"Sets the signal value to <code>null</code> and removes the URL query param.",returnType:"void"}]},{name:"QueryParamSignalOptions",description:"The object containing the options when creating a query param signal.",typeParams:[{name:"T",type:"any",description:"The prefered type of the signal. Should only be used if the signal is supposed to be serializable.",required:!1,default:"implicit type based on the initial value"}],properties:[{name:"paramName",type:"string",description:"The name of the param to store the value under.</p><p>Required."},{name:"serialize",type:"(value: T | null) => string | null",description:"The function to use to serialize the value (prefered type -> string). If used, the <code>deserialize</code> function has to be specified as well."},{name:"deserialize",type:"(value: string) => T | null",description:"The function to use to deserialize the value (string -> prefered type). If used, the <code>serialize</code> function has to be specified as well."}]}],functions:[{name:"queryParamSignal",description:"Creates a <code>WritableSignal</code> that synchronizes its value with a URL search param.",returnType:"QueryParamSignal<T>",typeParams:[{name:"T",type:"any",description:"The prefered type of the signal. Should only be used if the signal is supposed to be serializable.",required:!1,default:"implicit type based on the initial value"}],params:[{name:"initialValue",type:"T | null",description:"The initial value for the signal. Will only be used if the specified param is not found.",required:!0},{name:"optionsOrParam",type:"string | QueryParamSignalOptions<T>",description:"Can either be a string specifying the param name to use or an object containing the configuration options for the signal.",required:!0}]}]};var Ke={name:"Query param signal",exceptions:[{name:"queryParamSignal",exceptions:[{code:"DKT-FT3010",exceptionText:"Both serialize and deserialize must either be both defined or both undefined.",description:["This exceptions is raised if a signal's options object contains only <code>serialize</code> or only <code>deserialize</code> function definitions.","For the signal to work properly, both <code>serialize</code> and <code>deserialize</code> must be defined."]},{code:"DKT-FT3011",exceptionText:"Non-string initial values are only allowed for serializable signals. Define serialization options.",description:["This exceptions is raised if a non-serializable signal is given an initial value other than a string or <code>null</code>","To fix this issue either define the serialization options or change the initial value to a string or <code>null</code>"]}]}]};var ze=(()=>{class n{constructor(){this.QueryParamSignalExampleData=ee,this.QueryParamSignalSerializationExampleData=te}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["query-param-signal-page"]],decls:37,vars:2,consts:[["pageTitle","Query Param Signal"],["heading","Basic query param signal","initialTab","ts",3,"data"],["heading","Query Param Signal with Serialization",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Query Param Signal"),t(),e(5," syncs a "),i(6,"code"),e(7,"WritableSignal"),t(),e(8," with a URL query parameter. This is useful for making signal values visible and shareable via the browser's address bar. "),t(),i(9,"p"),e(10," It supports serialization of custom types and keeps the query parameter and signal in sync on changes or page loads. "),t()(),i(11,"section")(12,"app-h2"),e(13,"Core Behavior"),t(),i(14,"p"),e(15," On initialization, the signal reads its value from the URL. If none is present, it initializes the query parameter with the signal's default. "),t(),i(16,"p"),e(17," Updates to the signal also update the URL. The "),i(18,"code"),e(19,"clear()"),t(),e(20," method removes the parameter and resets the signal to "),i(21,"code"),e(22,"null"),t(),e(23,". "),t(),s(24,"app-code-example",1),t(),i(25,"section")(26,"app-h2"),e(27,"Serialization and Deserialization"),t(),i(28,"p"),e(29," To support types beyond strings, provide "),i(30,"code"),e(31,"serialize()"),t(),e(32," and "),i(33,"code"),e(34,"deserialize()"),t(),e(35," methods. These convert values to and from strings for syncing with the URL. "),t(),s(36,"app-code-example",2),t()),a&2&&(l(24),r("data",o.QueryParamSignalExampleData),l(12),r("data",o.QueryParamSignalSerializationExampleData))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var Ue={name:"Queue signal",functions:[{name:"queueSignal",description:"Creates a writable queue signal, which is a reactive queue data structure.",params:[{name:"initialValue",type:"T[]",description:"Initial items in the queue.",default:"[]",required:!1}],typeParams:[{name:"T",type:"any",description:"The type of elements held in the queue."}],returnType:"WritableQueueSignal<T>"}],interfaces:[{name:"QueueSignal<T>",description:"A read-only queue signal, providing non-mutating helpers and computed properties.",methods:[{name:"()",description:"Reactively returns the current value of the queue as an array.",returnType:"T[]"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the queue is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the number of items in the queue.",returnType:"number"},{name:"front",description:"Reactively returns the front item of the queue or <code>undefined</code>.",returnType:"T | undefined"},{name:"asArray",description:"Reactively returns a shallow copy of the queue as an array.",returnType:"T[]"},{name:"peek",description:"Reactively returns the front item in the queue, or <code>undefined</code> if the queue is empty.",returnType:"T | undefined"}],typeParams:[{name:"T",type:"any",description:"The type of elements held in the queue."}]},{name:"WritableQueueSignal<T>",description:"A writable queue signal, providing mutating and non-mutating helpers.",methods:[{name:"()",description:"Reactively returns the current value of the queue as an array.",returnType:"T[]"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the queue is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the number of items in the queue.",returnType:"number"},{name:"front",description:"Reactively returns the front item of the queue or <code>undefined</code>.",returnType:"T | undefined"},{name:"asArray",description:"Reactively returns a shallow copy of the queue as an array.",returnType:"T[]"},{name:"peek",description:"Reactively returns the front item in the queue, or <code>undefined</code> if the queue is empty.",returnType:"T | undefined"},{name:"asReadonly",description:"Returns a read-only version of the queue signal.",returnType:"QueueSignal<T>"},{name:"enqueue",description:"Adds one or more items to the end of the queue.",params:[{name:"items",type:"T[]",description:"The elements to enqueue."}],returnType:"void"},{name:"dequeue",description:"Removes and returns the front item of the queue. Returns <code>undefined</code> if the queue is empty.",returnType:"T | undefined"},{name:"clear",description:"Clears all items from the queue.",returnType:"void"},{name:"set",description:"Replaces the queue with a new array of items.",params:[{name:"value",type:"T[]",description:"The new array to set as the queue."}],returnType:"void"},{name:"update",description:"Updates the queue using the provided update function.",params:[{name:"updateFn",type:"(current: T[]) => T[]",description:"Function that receives the current queue and returns a new queue."}],returnType:"void"}],typeParams:[{name:"T",type:"any",description:"The type of elements held in the queue."}]}]};var Ve=(()=>{class n{constructor(){this.QueueSignalBasicExampleData=ie}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["queue-signal-page"]],decls:107,vars:2,consts:[["pageTitle","Queue Signal"],["heading","Basic usage of queueSignal","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Queue Signal"),t(),e(5," is a reactive signal designed to manage a queue of items. It offers a full set of mutating and non-mutating methods, allowing developers to interact with the queue reactively, while preserving immutability for reactivity. "),t(),i(6,"p"),e(7," The signal supports methods such as "),i(8,"code"),e(9,"enqueue()"),t(),e(10,", "),i(11,"code"),e(12,"dequeue()"),t(),e(13,", and "),i(14,"code"),e(15,"clear()"),t(),e(16," to manipulate the queue, and provides computed properties like "),i(17,"code"),e(18,"isEmpty"),t(),e(19,", "),i(20,"code"),e(21,"size"),t(),e(22,", and "),i(23,"code"),e(24,"front"),t(),e(25," to observe the queue's state. "),t()(),i(26,"section")(27,"app-h2"),e(28,"Manipulation methods"),t(),i(29,"p"),e(30," The writable queue signal exposes several methods to manipulate the queue, including "),i(31,"code"),e(32,"enqueue()"),t(),e(33,", "),i(34,"code"),e(35,"dequeue()"),t(),e(36,", "),i(37,"code"),e(38,"clear()"),t(),e(39,", and "),i(40,"code"),e(41,"set()"),t(),e(42,". These methods reactively update the signal's value. "),t(),i(43,"p"),e(44," The "),i(45,"code"),e(46,"enqueue()"),t(),e(47," method adds one or more items to the end of the queue, while "),i(48,"code"),e(49,"dequeue()"),t(),e(50," removes and returns the front item. The "),i(51,"code"),e(52,"clear()"),t(),e(53," method resets the queue to an empty state, and "),i(54,"code"),e(55,"set()"),t(),e(56," replaces the entire queue with a new array of items. "),t(),i(57,"p"),e(58,"All methods are reactive, ensuring that updates are automatically reflected wherever the queue is consumed."),t(),s(59,"app-code-example",1),t(),i(60,"section")(61,"app-h2"),e(62,"Computed Properties"),t(),i(63,"p"),e(64," The Queue Signal provides several computed properties to easily access information about the current state of the queue: "),t(),i(65,"ul")(66,"li")(67,"code"),e(68,"isEmpty"),t(),e(69,": Returns "),i(70,"code"),e(71,"true"),t(),e(72," if the queue is empty."),t(),i(73,"li")(74,"code"),e(75,"size"),t(),e(76,": Returns the current number of items in the queue."),t(),i(77,"li")(78,"code"),e(79,"front"),t(),e(80,": Returns the first item in the queue, or "),i(81,"code"),e(82,"undefined"),t(),e(83," if the queue is empty."),t(),i(84,"li")(85,"code"),e(86,"asArray"),t(),e(87,": Returns a shallow copy of the queue as an array."),t()()(),i(88,"section")(89,"app-h2"),e(90,"Peek and front methods"),t(),i(91,"p"),e(92," The "),i(93,"code"),e(94,"peek()"),t(),e(95," method allows to get the front item of the queue without removing it. It works similarly to the "),i(96,"code"),e(97,"front()"),t(),e(98," computed property but is provided as a method for flexibility. "),t()(),i(99,"section")(100,"app-h2"),e(101,"Read-only queue signal"),t(),i(102,"p"),e(103," The "),i(104,"code"),e(105,"asReadonly()"),t(),e(106," method creates a read-only version of the queue signal. This version removes all mutating methods but retains access to the computed properties, allowing for safe consumption of the queue without the ability to modify it. "),t()()),a&2&&(l(59),r("data",o.QueueSignalBasicExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var je={name:"Set signal",functions:[{name:"setSignal",description:"Creates a writable, reactive Set signal with convenient, immutable Set manipulation methods.",params:[{name:"initialValue",type:"Iterable<T>",description:"Initial values for the set.",default:"[]",required:!1}],typeParams:[{name:"T",type:"any",description:"The type of items stored in the set."}],returnType:"WritableSetSignal<T>"}],interfaces:[{name:"SetSignal<T>",description:"A read-only set signal with non-mutating methods.",methods:[{name:"()",description:"Reactively returns the current value of the set.",returnType:"Set<T>"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the set is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the number of elements in the set.",returnType:"number"},{name:"has",description:"Reactively checks if a value exists in the set.",params:[{name:"value",type:"T",description:"The value to check for existence."}],returnType:"boolean"},{name:"asArray",description:"Reactively returns an array containing all items in the set.",returnType:"T[]"}],typeParams:[{name:"T",type:"any",description:"The type of items stored in the set."}]},{name:"WritableSetSignal<T>",description:"A writable set signal with mutating and non-mutating methods.",methods:[{name:"()",description:"Returns the current value of the set.",returnType:"Set<T>"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the set is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the number of elements in the set.",returnType:"number"},{name:"has",description:"Reactively checks if a value exists in the set.",params:[{name:"value",type:"T",description:"The value to check for existence."}],returnType:"boolean"},{name:"asArray",description:"Reactively returns an array containing all items in the set.",returnType:"T[]"},{name:"asReadonly",description:"Returns a read-only version of the set signal.",returnType:"SetSignal<T>"},{name:"add",description:"Adds a value to the set.",params:[{name:"value",type:"T",description:"The value to add."}],returnType:"void"},{name:"delete",description:"Deletes a value from the set. Returns <code>true</code> if the value was removed.",params:[{name:"value",type:"T",description:"The value to delete."}],returnType:"boolean"},{name:"clear",description:"Clears all values from the set.",returnType:"void"},{name:"set",description:"Replaces the set with a new set.",params:[{name:"value",type:"Set<T>",description:"The new set value."}],returnType:"void"},{name:"update",description:"Updates the set using an update function.",params:[{name:"updateFn",type:"(current: Set<T>) => Set<T>",description:"Function that receives the current set and returns a new set."}],returnType:"void"}],typeParams:[{name:"T",type:"any",description:"The type of items stored in the set."}]}]};var Ne=(()=>{class n{constructor(){this.SetSignalBasicExampleData=ne}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["set-signal-page"]],decls:90,vars:2,consts:[["pageTitle","Set Signal"],["heading","Basic usage of setSignal","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Set Signal"),t(),e(5," is a reactive signal designed to manage a set of unique values. It provides both mutating and non-mutating methods to interact with the set, along with computed properties like "),i(6,"code"),e(7,"isEmpty"),t(),e(8,", "),i(9,"code"),e(10,"size"),t(),e(11,", and "),i(12,"code"),e(13,"asArray"),t(),e(14,". "),t()(),i(15,"section")(16,"app-h2"),e(17,"Set signal methods"),t(),i(18,"p"),e(19," The writable set signal exposes several mutating methods, such as "),i(20,"code"),e(21,"add()"),t(),e(22,", "),i(23,"code"),e(24,"delete()"),t(),e(25,", "),i(26,"code"),e(27,"clear()"),t(),e(28,", and "),i(29,"code"),e(30,"set()"),t(),e(31,", allowing you to modify the set in a reactive manner. "),t(),i(32,"p"),e(33," The "),i(34,"code"),e(35,"add()"),t(),e(36," method adds a value to the set, while "),i(37,"code"),e(38,"delete()"),t(),e(39," removes a value. The "),i(40,"code"),e(41,"clear()"),t(),e(42," method resets the set, and "),i(43,"code"),e(44,"set()"),t(),e(45," replaces the entire set with a new one. "),t(),i(46,"p"),e(47," Additionally, the set signal exposes the "),i(48,"code"),e(49,"has()"),t(),e(50," method, which returns "),i(51,"code"),e(52,"true"),t(),e(53," if the set contains the given element. "),t(),s(54,"app-code-example",1),t(),i(55,"section")(56,"app-h2"),e(57,"Computed properties"),t(),i(58,"p"),e(59,"The Set Signal includes several computed properties that provide easy access to the state of the set:"),t(),i(60,"ul")(61,"li")(62,"code"),e(63,"isEmpty"),t(),e(64,": A computed signal that returns "),i(65,"code"),e(66,"true"),t(),e(67," if the set is empty."),t(),i(68,"li")(69,"code"),e(70,"size"),t(),e(71,": A computed signal that returns the current number of items in the set."),t(),i(72,"li")(73,"code"),e(74,"asArray"),t(),e(75,": A computed signal that returns a shallow copy of the set as an array."),t()()(),i(76,"section")(77,"app-h2"),e(78,"Read-only set signal"),t(),i(79,"p"),e(80," The "),i(81,"code"),e(82,"asReadonly()"),t(),e(83," method creates a read-only version of the set signal. This version exposes all the non-mutating methods and computed properties but disables any mutations (like "),i(84,"code"),e(85,"add()"),t(),e(86,", "),i(87,"code"),e(88,"delete()"),t(),e(89,", etc.), ensuring that the set's state can only be observed and not modified externally. "),t()()),a&2&&(l(54),r("data",o.SetSignalBasicExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var We={name:"Stack signal",functions:[{name:"stackSignal",description:"Creates a writable stack signal, which is a reactive stack data structure.",params:[{name:"initialValue",type:"T[]",description:"Initial items in the stack.",default:"[]",required:!1}],typeParams:[{name:"T",type:"any",description:"The type of elements held in the stack."}],returnType:"WritableStackSignal<T>"}],interfaces:[{name:"StackSignal<T>",description:"A read-only stack signal, providing non-mutating helpers and computed properties.",methods:[{name:"()",description:"Reactively returns the current value of the stack as an array.",returnType:"T[]"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the stack is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the number of items in the stack.",returnType:"number"},{name:"top",description:"Reactively returns the top item of the stack, or <code>undefined</code> if the stack is empty.",returnType:"T | undefined"},{name:"asArray",description:"Reactively returns a shallow copy of the stack as an array.",returnType:"T[]"},{name:"peek",description:"Reactively returns the top item in the stack, or <code>undefined</code> if the stack is empty.",returnType:"T | undefined"}],typeParams:[{name:"T",type:"any",description:"The type of elements held in the stack."}]},{name:"WritableStackSignal<T>",description:"A writable stack signal, providing mutating and non-mutating helpers.",methods:[{name:"()",description:"Reactively returns the current value of the stack as an array.",returnType:"T[]"},{name:"isEmpty",description:"Reactively returns <code>true</code> if the stack is empty.",returnType:"boolean"},{name:"size",description:"Reactively returns the number of items in the stack.",returnType:"number"},{name:"top",description:"Reactively returns the top item of the stack, or <code>undefined</code> if the stack is empty.",returnType:"T | undefined"},{name:"asArray",description:"Reactively returns a shallow copy of the stack as an array.",returnType:"T[]"},{name:"peek",description:"Reactively returns the top item in the stack, or <code>undefined</code> if the stack is empty.",returnType:"T | undefined"},{name:"asReadonly",description:"Returns a read-only version of the stack signal.",returnType:"StackSignal<T>"},{name:"push",description:"Pushes one or more items onto the top of the stack.",params:[{name:"items",type:"T[]",description:"The elements to push onto the stack."}],returnType:"void"},{name:"pop",description:"Removes and returns the top item of the stack. Returns <code>undefined</code> if the stack is empty.",returnType:"T | undefined"},{name:"clear",description:"Clears all items from the stack.",returnType:"void"},{name:"set",description:"Replaces the stack with a new array of items.",params:[{name:"value",type:"T[]",description:"The new array to set as the stack."}],returnType:"void"},{name:"update",description:"Updates the stack using the provided update function.",params:[{name:"updateFn",type:"(current: T[]) => T[]",description:"Function that receives the current stack and returns a new stack."}],returnType:"void"}],typeParams:[{name:"T",type:"any",description:"The type of elements held in the stack."}]}]};var _e=(()=>{class n{constructor(){this.StackSignalBasicExampleData=ae}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["stack-signal-page"]],decls:85,vars:2,consts:[["pageTitle","Stack Signal"],["heading","Basic usage of stackSignal","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Stack Signal"),t(),e(5," is a reactive signal designed to manage a stack of items. It provides mutating and non-mutating methods to interact with the stack, as well as computed properties for tracking its state. "),t()(),i(6,"section")(7,"app-h2"),e(8,"Stack Signal Methods"),t(),i(9,"p"),e(10," The writable stack signal exposes several methods for manipulating the stack, including "),i(11,"code"),e(12,"push()"),t(),e(13,", "),i(14,"code"),e(15,"pop()"),t(),e(16,", "),i(17,"code"),e(18,"clear()"),t(),e(19,", and "),i(20,"code"),e(21,"set()"),t(),e(22,". Each method ensures that the stack remains immutable by replacing it with a new instance. "),t(),i(23,"p"),e(24," The "),i(25,"code"),e(26,"push()"),t(),e(27," method adds one or more items to the top of the stack, while "),i(28,"code"),e(29,"pop()"),t(),e(30," removes and returns the top item. The "),i(31,"code"),e(32,"clear()"),t(),e(33," method resets the stack, and "),i(34,"code"),e(35,"set()"),t(),e(36," replaces the entire stack with a new array. "),t(),s(37,"app-code-example",1),t(),i(38,"section")(39,"app-h2"),e(40,"Computed properties"),t(),i(41,"p"),e(42,"The Stack Signal includes computed properties to easily observe the state of the stack:"),t(),i(43,"ul")(44,"li")(45,"code"),e(46,"isEmpty"),t(),e(47,": Returns "),i(48,"code"),e(49,"true"),t(),e(50," if the stack is empty."),t(),i(51,"li")(52,"code"),e(53,"size"),t(),e(54,": Returns the current number of items in the stack."),t(),i(55,"li")(56,"code"),e(57,"top"),t(),e(58,": Returns the top item in the stack, or "),i(59,"code"),e(60,"undefined"),t(),e(61," if the stack is empty."),t(),i(62,"li")(63,"code"),e(64,"asArray"),t(),e(65,": Returns a shallow copy of the stack as an array."),t()()(),i(66,"section")(67,"app-h2"),e(68,"Peek and top methods"),t(),i(69,"p"),e(70," The "),i(71,"code"),e(72,"peek()"),t(),e(73," method allows to get the top item of the stack without removing it. It works similarly to the "),i(74,"code"),e(75,"top()"),t(),e(76," computed property but is provided as a method for flexibility. "),t()(),i(77,"section")(78,"app-h2"),e(79,"Read-only stack signal"),t(),i(80,"p"),e(81," The "),i(82,"code"),e(83,"asReadonly()"),t(),e(84," method returns a read-only version of the stack signal. This version retains the non-mutating methods and computed properties, while disabling all mutating operations, ensuring safe consumption of the stack's state. "),t()()),a&2&&(l(37),r("data",o.StackSignalBasicExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var Qe={name:"Throttled signal",interfaces:[{name:"ThrottledSignal",extends:"WritableSignal<T>",typeParams:[{name:"T",type:"any",description:"The type of the value to be stored.",required:!1,default:"implicit type based on the initial value"}],properties:[{name:"throttleTime",description:"The throttle period of the signal.",type:"number"}]}],functions:[{name:"throttledSignal",description:"Creates a <code>WritableSignal</code> that limits updates to its value based on a specified throttle interval.",returnType:"QueryParamSignal<T>",typeParams:[{name:"T",type:"any",description:"The type of the value to be stored.",required:!1,default:"implicit type based on the initial value"}],params:[{name:"initialValue",type:"T | null",description:"The initial value for the signal.",required:!0},{name:"throttleTime",type:"number",description:"The throttle interval, in milliseconds.",required:!0}]}]};var Ge=(()=>{class n{constructor(){this.ThrottledSignalExampleData=oe}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["throttled-signal-page"]],decls:20,vars:1,consts:[["pageTitle","Throttled Signal"],["src","/ardium-ui-docs/assets/throttled.svg","alt","Illustration visualizing the throttled signal value handling"],["heading","Basic Throttled Signal","initialTab","ts",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Throttled Signal"),t(),e(5," restricts how often its value can be updated, enforcing a minimum delay between changes. This helps control performance and rate limits in high-frequency scenarios. "),t(),i(6,"p"),e(7," Only the latest value within each throttle window is applied, making it suitable for handling scroll, resize, or mouse movement events. "),t()(),i(8,"section")(9,"app-h2"),e(10,"Throttle Behavior"),t(),i(11,"p"),e(12," The signal requires an initial value and a throttle interval (ms). Updates are allowed at most once per interval. Intermediate updates are ignored unless they are the last before the interval ends. "),t(),i(13,"p"),e(14," The applied throttle time is accessible through the read-only "),i(15,"code"),e(16,"throttleTime"),t(),e(17," property. "),t(),s(18,"img",1)(19,"app-code-example",2),t()),a&2&&(l(19),r("data",o.ThrottledSignalExampleData))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var $e={name:"Tuple signal",functions:[{name:"tupleSignal",description:"Creates a writable, reactive tuple signal of <strong>fixed length</strong>, with tuple-specific and array-like helpers.",params:[{name:"initialValue",type:"T",description:"The initial tuple value."}],typeParams:[{name:"T",type:"readonly unknown[]",description:"The tuple type (e.g. <code>[number, string, boolean]</code>)."}],returnType:"WritableTupleSignal<T>"}],interfaces:[{name:"TupleSignal<T>",description:"A read-only tuple signal.",methods:[{name:"()",description:"Reactively returns the current tuple value.",returnType:"T"},{name:"entriesArray",description:"Reactively returns an array of tuple entries as <code>[index, value]</code> pairs.",returnType:"{ [K in keyof T]: [K, T[K]] }[number][]"},{name:"getAt",description:"Reactively returns the value at the given index in the tuple.",params:[{name:"index",type:"I",description:"The index of the element to retrieve."}],returnType:"T[I]"}],typeParams:[{name:"T",type:"readonly unknown[]",description:"The tuple type."}]},{name:"WritableTupleSignal<T>",description:"A writable tuple signal.",methods:[{name:"()",description:"Reactively returns the current tuple value.",returnType:"T"},{name:"entriesArray",description:"Reactively returns an array of tuple entries as <code>[index, value]</code> pairs.",returnType:"{ [K in keyof T]: [K, T[K]] }[number][]"},{name:"getAt",description:"Reactively returns the value at the given index in the tuple.",params:[{name:"index",type:"I",description:"The index of the element to retrieve."}],returnType:"T[I]"},{name:"asReadonly",description:"Returns a read-only version of the tuple signal.",returnType:"TupleSignal<T>"},{name:"setAt",description:"Sets the value at a given index in the tuple.",params:[{name:"index",type:"I",description:"The index to set."},{name:"value",type:"T[I]",description:"The new value to assign at the given index."}],returnType:"void"},{name:"update",description:"Updates the entire tuple using the provided update function.",params:[{name:"updateFn",type:"(current: T) => T",description:"Function that receives the current tuple and returns a new tuple."}],returnType:"void"},{name:"updateAt",description:"Updates the value at a given index using the provided update function.",params:[{name:"index",type:"I",description:"The index to update."},{name:"updateFn",type:"(value: T[I]) => T[I]",description:"Function that receives the current value and returns an updated value."}],returnType:"void"}],typeParams:[{name:"T",type:"readonly unknown[]",description:"The tuple type."}]}]};var Je=(()=>{class n{constructor(){this.TupleSignalBasicExampleData=re}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["tuple-signal-page"]],decls:76,vars:2,consts:[["pageTitle","Tuple Signal"],["heading","Basic usage of tupleSignal","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Tuple Signal"),t(),e(5," is a reactive signal designed for managing fixed-length arrays, or tuples, in Angular. It provides methods to safely manipulate tuples, along with computed properties for common tuple queries. "),t()(),i(6,"section")(7,"app-h2"),e(8,"Tuple Signal Methods"),t(),i(9,"p"),e(10," The writable tuple signal exposes several mutating methods such as "),i(11,"code"),e(12,"setAt()"),t(),e(13,", "),i(14,"code"),e(15,"updateAt()"),t(),e(16,", and "),i(17,"code"),e(18,"update()"),t(),e(19," that allow for reactive updates to the tuple. "),t(),i(20,"p"),e(21," The "),i(22,"code"),e(23,"setAt()"),t(),e(24," method allows setting a value at a specified index, while "),i(25,"code"),e(26,"updateAt()"),t(),e(27," applies an update function to a value at a specific index. The "),i(28,"code"),e(29,"update()"),t(),e(30," method enables updating the entire tuple using a provided function. "),t(),i(31,"p"),e(32,"These mutating methods always return a new tuple to preserve immutability and ensure optimal reactivity."),t(),s(33,"app-code-example",1),t(),i(34,"section")(35,"app-h2"),e(36,"Computed properties"),t(),i(37,"p"),e(38,"The Tuple Signal includes computed properties that provide insights into the tuple's state:"),t(),i(39,"ul")(40,"li")(41,"code"),e(42,"entriesArray"),t(),e(43,": Returns an array of the tuple entries, where each entry is a tuple of the index and the value, such as "),i(44,"code"),e(45,"[[0, 'Peas'], [1, 5], [2, true]]"),t(),e(46,". "),t()(),i(47,"p"),e(48," These properties are automatically updated when the tuple is modified, making them useful for reactive data binding and templates. "),t()(),i(49,"section")(50,"app-h2"),e(51,"Get and set tuple values"),t(),i(52,"p"),e(53," The "),i(54,"code"),e(55,"getAt()"),t(),e(56," method retrieves the value at a specific index of the tuple. It provides a type-aware way to access tuple elements by their index. "),t(),i(57,"p"),e(58," The "),i(59,"code"),e(60,"setAt()"),t(),e(61," method allows setting the value of a specific index in the tuple, while ensuring that the signal is updated reactively. The value argument's type is inferred based on the provided index. "),t()(),i(62,"section")(63,"app-h2"),e(64,"Read-only tuple signal"),t(),i(65,"p"),e(66," The "),i(67,"code"),e(68,"asReadonly()"),t(),e(69," method returns a read-only version of the tuple signal. This version exposes all non-mutating methods and computed properties, while disabling mutating methods like "),i(70,"code"),e(71,"setAt()"),t(),e(72," and "),i(73,"code"),e(74,"updateAt()"),t(),e(75," for safe consumption. "),t()()),a&2&&(l(33),r("data",o.TupleSignalBasicExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var Xe={name:"DOM Boxes",functions:[{name:"getDomContentRect",description:"Calculates the content rectangle of an element, excluding padding and border values. This function is ideal for obtaining the precise dimensions of the inner content area of an element.",params:[{name:"el",type:"HTMLElement | ElementRef<HTMLElement>",description:"The target element or Angular ElementRef whose content rectangle should be calculated.",required:!0}],returnType:"DOMRect"},{name:"getDomPaddingRect",description:"Calculates the padding rectangle of an element, including padding but excluding border values. Use this function to get dimensions within padding boundaries, excluding any borders.",params:[{name:"el",type:"HTMLElement | ElementRef<HTMLElement>",description:"The target element or Angular ElementRef whose padding rectangle should be calculated.",required:!0}],returnType:"DOMRect"}]};var Ze=(()=>{class n{constructor(){this.DomBoxesExampleData=se}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["dom-boxes-page"]],decls:86,vars:2,consts:[["pageTitle","DOM Boxes"],["heading","Example Usage of Both Functions","initialTab","ts",3,"data","isCodeShown"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The DOM Boxes utility provides functions to retrieve specific box dimensions of an HTML element, namely the content and padding boxes. These functions adjust for padding and border values, offering more precise measurements than the native "),i(3,"code"),e(4,"getBoundingClientRect"),t(),e(5," method. "),t()(),i(6,"section")(7,"app-h2"),e(8,"getDomContentRect"),t(),i(9,"p"),e(10," The "),i(11,"code"),e(12,"getDomContentRect"),t(),e(13," function calculates the content area of an element, excluding padding and border values. This is useful for obtaining the precise inner content dimensions, which is essential for layout calculations that depend only on the usable content area. "),t(),i(14,"p"),e(15," To use "),i(16,"code"),e(17,"getDomContentRect"),t(),e(18,", pass an "),i(19,"code"),e(20,"HTMLElement"),t(),e(21," or an Angular "),i(22,"code"),e(23,"ElementRef<HTMLElement>"),t(),e(24," as the argument. The function will return a "),i(25,"code"),e(26,"DOMRect"),t(),e(27," object with properties that reflect the adjusted dimensions and coordinates of the content area, based on the element's computed style. "),t()(),i(28,"section")(29,"app-h2"),e(30,"getDomPaddingRect"),t(),i(31,"p"),e(32," The "),i(33,"code"),e(34,"getDomPaddingRect"),t(),e(35," function calculates the element's area including padding but excluding the border values. This function is suitable when you need the element's padded area without counting the borders, such as when working within the padding boundaries of a container. "),t(),i(36,"p"),e(37," Similar to "),i(38,"code"),e(39,"getDomContentRect"),t(),e(40,", this function accepts an "),i(41,"code"),e(42,"HTMLElement"),t(),e(43," or an Angular "),i(44,"code"),e(45,"ElementRef<HTMLElement>"),t(),e(46," as an argument. The returned "),i(47,"code"),e(48,"DOMRect"),t(),e(49," object provides the coordinates and dimensions of the padding box, based on the computed style values. "),t()(),s(50,"app-code-example",1),i(51,"section")(52,"app-h2"),e(53,"Best Practices"),t(),i(54,"p"),e(55," Here are some guidelines on when to use "),i(56,"code"),e(57,"getDomContentRect"),t(),e(58," and "),i(59,"code"),e(60,"getDomPaddingRect"),t(),e(61," over the native "),i(62,"code"),e(63,"getBoundingClientRect"),t(),e(64," method. "),t(),i(65,"ul")(66,"li")(67,"strong"),e(68,"Use "),i(69,"code"),e(70,"getDomContentRect"),t()(),e(71," when you need only the content dimensions of an element, excluding padding and borders. This is ideal for precise layout adjustments where only the core content area should be considered. "),t(),i(72,"li")(73,"strong"),e(74,"Use "),i(75,"code"),e(76,"getDomPaddingRect"),t()(),e(77," if you need the padded area of an element without including the borders. This is useful in cases where layout or positioning needs to respect padding but should ignore border width. "),t(),i(78,"li")(79,"strong"),e(80,"Use "),i(81,"code"),e(82,"getBoundingClientRect"),t()(),e(83," if you need a quick, inclusive measurement of an element, including borders and padding. This native method is generally faster and sufficient for many standard layout tasks where precise inner box dimensions are not required. "),t(),i(84,"li"),e(85," Ensure that the target element has its styles (padding, borders) explicitly set if exact measurements are needed, as these functions rely on computed style values. Missing styles might lead to unexpected dimensions. "),t()()()),a&2&&(l(50),r("data",o.DomBoxesExampleData)("isCodeShown",!1))},dependencies:[f,h,u,c,m],encapsulation:2})}}return n})();var Ye={name:"Escape HTML",modules:[{name:"ArdiumEscapeHTMLModule",exports:"ArdiumEscapeHTMLPipe"}],pipes:[{name:"ArdiumEscapeHTMLPipe",exportedFrom:"ArdiumEscapeHTMLModule",selector:"escapeHTML",description:"Transforms an input string into a string that is safe to use inside of HTML."}],functions:[{name:"escapeHTML",description:"Transforms an input string into a string that is safe to use inside of HTML.",returnType:"string",params:[{name:"value",type:"string",description:"The string to transform.",required:!0}]}]};var et=(()=>{class n{constructor(){this.EscapeHTMLExampleData=le}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["escape-html-page"]],decls:70,vars:1,consts:[["pageTitle","Escape HTML"],["moduleName","ArdiumEscapeHTMLModule"],["href","https://angular.dev/guide/templates/binding"],["heading","Basic escapeHTML pipe usage",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2,"Pipe for escaping HTML and XML strings in Angular templates, with a helper function for programmatic usage."),t()(),s(3,"app-prerequisites",1),i(4,"section")(5,"app-h2"),e(6,"Why escape HTML?"),t(),i(7,"p"),e(8," Escaping HTML is essential to prevent unintended behaviors caused by special characters in strings. Characters like "),i(9,"code"),e(10,"<"),t(),e(11,", "),i(12,"code"),e(13,">"),t(),e(14,", "),i(15,"code"),e(16,'"'),t(),e(17,", and others, if left unescaped, can be interpreted as HTML, which could lead to rendering issues or potential security risks, such as Cross-Site Scripting (XSS) attacks. "),t()(),i(18,"section")(19,"app-h2"),e(20,"Using the "),i(21,"code"),e(22,"escapeHTML"),t(),e(23," pipe"),t(),i(24,"p"),e(25," The "),i(26,"code"),e(27,"escapeHTML"),t(),e(28," pipe offers a convenient way to sanitize HTML content within Angular templates, converting special characters to their HTML-safe equivalents. "),t(),i(29,"p"),e(30," By using this pipe, characters such as "),i(31,"code"),e(32,"&"),t(),e(33,", "),i(34,"code"),e(35,"<"),t(),e(36,", "),i(37,"code"),e(38,">"),t(),e(39,", "),i(40,"code"),e(41,'"'),t(),e(42,", and "),i(43,"code"),e(44,"'"),t(),e(45," are automatically converted to their HTML entities, making the content safe for display in the DOM. "),t(),i(46,"p"),e(47," The "),i(48,"code"),e(49,"escapeHTML"),t(),e(50," pipe is particularly helpful when displaying user-generated content, such as usernames, comments, or any other inputs from external sources, ensuring that these strings render as text rather than HTML. To use the "),i(51,"code"),e(52,"escapeHTML"),t(),e(53," pipe in your template, simply apply it to any string binding where HTML escaping is needed. "),t(),i(54,"p")(55,"strong"),e(56,"Note:"),t(),e(57," escaping HTML is not needed when the text will be used with "),i(58,"a",2),e(59,"text interpolation"),t(),e(60,". "),t(),s(61,"app-code-example",3),t(),i(62,"section")(63,"app-h2"),e(64,"Programmatic usage"),t(),i(65,"p"),e(66," For programmatic use outside of templates, the "),i(67,"code"),e(68,"escapeHTML"),t(),e(69," function offers the same HTML-escaping functionality, converting characters directly in code where template pipes aren't available. "),t()()),a&2&&(l(61),r("data",o.EscapeHTMLExampleData))},dependencies:[f,h,u,b,c,m],encapsulation:2})}}return n})();var tt={name:"File Utility Pipes",modules:[{name:"ArdiumFilePipesModule",description:"Module providing file utility pipes for extracting file extension, file name, and formatting file size.",exports:["ArdiumFileExtensionPipe","ArdiumFileNamePipe","ArdiumFileSizePipe"]}],pipes:[{name:"fileext",selector:"fileext",exportedFrom:"ArdiumFilePipesModule",description:"Extracts the file extension from a filename or File object. Optionally includes the dot prefix in the returned extension.",params:[{name:"value",type:"string | File",description:"The file name as a string or a File object from which the extension is extracted.",required:!0},{name:"withDot",type:"boolean",description:"Determines if the dot should prefix the returned extension (default: false).",required:!1,default:"false"}]},{name:"filename",selector:"filename",exportedFrom:"ArdiumFilePipesModule",description:"Extracts the base name from a file name or File object, excluding the extension.",params:[{name:"value",type:"string | File",description:"The file name as a string or a File object from which the base name is derived.",required:!0}]},{name:"filesize",selector:"filesize",exportedFrom:"ArdiumFilePipesModule",description:"Converts a file size (in bytes) to a human-readable format. Allows customization of precision and spacing.",params:[{name:"value",type:"number",description:"The file size in bytes.",required:!0},{name:"precision",type:"number",description:"Decimal precision for the converted size (default: 2).",required:!1,default:"2"},{name:"useSpace",type:"boolean",description:"Determines if a space separates the value and unit (default: false).",required:!1,default:"false"}]}]};var it=(()=>{class n{constructor(){this.FilePipesExampleData=de}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["file-pipes-page"]],decls:116,vars:1,consts:[["pageTitle","File Pipes"],["moduleName","ArdiumFilePipesModule"],["heading","Basic file pipes usage",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2,"Utility pipes for handling file extensions, file names, and file sizes in Angular templates."),t()(),s(3,"app-prerequisites",1),i(4,"section")(5,"app-h2"),e(6,"Overview"),t(),i(7,"p"),e(8," The "),i(9,"code"),e(10,"ArdiumFilePipesModule"),t(),e(11," provides three utility pipes that facilitate common file-related operations in Angular templates. These include: "),t(),i(12,"ul")(13,"li")(14,"code"),e(15,"filename"),t(),e(16,": Retrieves the base name of a file, excluding the extension."),t(),i(17,"li")(18,"code"),e(19,"fileext"),t(),e(20,": Extracts the file extension, optionally with the dot."),t(),i(21,"li")(22,"code"),e(23,"filesize"),t(),e(24,": Converts a file size (in bytes) into a human-readable format with customizable units. "),t()()(),i(25,"section")(26,"app-h2"),e(27,"Using the "),i(28,"code"),e(29,"filename"),t(),e(30," Pipe"),t(),i(31,"p"),e(32," The "),i(33,"code"),e(34,"filename"),t(),e(35," pipe retrieves the base name of a file without the extension, working with both file names as strings and "),i(36,"code"),e(37,"File"),t(),e(38," objects. Passing in "),i(39,"code"),e(40,"null"),t(),e(41," or "),i(42,"code"),e(43,"undefined"),t(),e(44,' will result in an empty string. A file name containing only the extension, such as ".env", will result in the whole file name being returned. '),t(),i(45,"p"),e(46," This pipe is particularly helpful when displaying a list of file names without their extensions in the user interface. "),t(),i(47,"p"),e(48," Apply the "),i(49,"code"),e(50,"filename"),t(),e(51," pipe to any string or "),i(52,"code"),e(53,"File"),t(),e(54," object binding where the base name is required. "),t()(),i(55,"section")(56,"app-h2"),e(57,"Using the "),i(58,"code"),e(59,"fileext"),t(),e(60," Pipe"),t(),i(61,"p"),e(62," The "),i(63,"code"),e(64,"fileext"),t(),e(65," pipe extracts the extension from a file name or a "),i(66,"code"),e(67,"File"),t(),e(68," object. It also has an option to include the dot in the extension. Passing in "),i(69,"code"),e(70,"null"),t(),e(71," or "),i(72,"code"),e(73,"undefined"),t(),e(74," will return "),i(75,"code"),e(76,"null"),t(),e(77,'. A file name containing only the extension, such as ".env", will result in '),i(78,"code"),e(79,"null"),t(),e(80," as well. "),t(),i(81,"p"),e(82,"This pipe is useful for displaying file types in applications that manage or display file lists."),t(),i(83,"p"),e(84," Apply the "),i(85,"code"),e(86,"fileext"),t(),e(87," pipe to any string or "),i(88,"code"),e(89,"File"),t(),e(90," object binding where the file's extension is required. "),t()(),i(91,"section")(92,"app-h2"),e(93,"Using the "),i(94,"code"),e(95,"filesize"),t(),e(96," Pipe"),t(),i(97,"p"),e(98," The "),i(99,"code"),e(100,"filesize"),t(),e(101," pipe converts a file size (in bytes) into a human-readable format. It provides customizable precision and an option to insert a space between the value and unit. Passing in "),i(102,"code"),e(103,"null"),t(),e(104," or "),i(105,"code"),e(106,"undefined"),t(),e(107," will result in an empty string. "),t(),i(108,"p"),e(109," This pipe is particularly useful when displaying file sizes for user-uploaded content or media in a clear, readable format. "),t(),i(110,"p"),e(111,"Apply the "),i(112,"code"),e(113,"filesize"),t(),e(114," pipe to any numeric binding that represents a file size in bytes."),t()(),s(115,"app-code-example",2)),a&2&&(l(115),r("data",o.FilePipesExampleData))},dependencies:[f,h,u,b,c,m],encapsulation:2})}}return n})();var nt={name:"File System",services:[{name:"FileSystemService",providedIn:'"root"',description:"Service for handling file system operations, including saving, uploading, and reading files. It leverages the File System Access API when available and provides fallback methods for unsupported browsers.",methods:[{name:"isFileSystemAPISupported",description:"Checks if the File System Access API is supported for the specified method.",params:[{name:"method",type:"'showSaveFilePicker' | 'showOpenFilePicker'",description:"The file system method to check for support.",required:!0}],returnType:"boolean"},{name:"saveAs",description:"Saves data as a file using the File System API or a fallback method.",params:[{name:"data",type:"string | Blob",description:"The data to be saved, either as a string or a Blob.",required:!0},{name:"options",type:"FileSystemSaveOptions",description:"Options for saving the file, such as file name and save method.",required:!1,default:'{ method: FileSystemMethod.PreferFileSystem, fileName: "download" }',isMergedObject:!0}],returnType:"Promise<boolean>"},{name:"requestFileUpload",description:"Requests a file upload using the File System Access API or a fallback method.",params:[{name:"options",type:"FileSystemRequestOptions",description:"Options for requesting the file upload, such as accepted file types.",required:!1,default:"{ method: FileSystemMethod.PreferFileSystem, multiple: false }",isMergedObject:!0}],returnType:"Promise<File | File[] | null>"},{name:"readFile",description:"Reads the content of a file as a string or ArrayBuffer, depending on the specified method.",params:[{name:"file",type:"File",description:"The file to read.",required:!0},{name:"readAs",type:"'text' | 'binary'",description:'The method to read the file ("text" for string or "binary" for ArrayBuffer).',required:!1,default:"'text'"},{name:"encoding",type:"string",description:"The encoding to use when reading the file as text. Defaults to UTF-8.",required:!1,default:"'UTF-8'"}],returnType:"Promise<string | ArrayBuffer | null>"}]}],enums:[{name:"FileSystemMethod",description:"Enumeration of file system methods to define whether the File System API or cross-browser compatible methods should be used.",definition:`export const FileSystemMethod = {
  PreferFileSystem: 'preferFileSystem',
  CrossBrowser: 'crossBrowser',
} as const;
export type FileSystemMethod = typeof FileSystemMethod[keyof typeof FileSystemMethod];`},{name:"FileSystemStartDirectory",description:"Enumeration of predefined directories to use as the starting location for file dialogs.",definition:`export const FileSystemStartDirectory = {
  Desktop: 'desktop',
  Documents: 'documents',
  Downloads: 'downloads',
  Music: 'music',
  Pictures: 'pictures',
  Videos: 'videos',
} as const;
export type FileSystemStartDirectory = typeof FileSystemStartDirectory[keyof typeof FileSystemStartDirectory];`}],types:[{name:"FileSystemSaveOptions",description:"Configuration options for saving files, including file name, method, and allowed file types.",definition:`type FileSystemSaveOptions = {
  method: "preferFileSystem";
  fileName?: string;
  directoryId?: string;
  startDirectory?: FileSystemStartDirectory;
  types?: Array<{
    description?: string;
    accept: Record<string, string[]>
  }>
} | {
  method: "crossBrowser";
}`},{name:"FileSystemRequestOptions",description:"Configuration options for requesting file uploads, including accepted file types and method.",definition:`type FileSystemRequestOptions = {
  method: "preferFileSystem";
  accept?: string | string[];
  multiple?: boolean;
  directoryId?: string;
  startDirectory?: FileSystemStartDirectory;
  types?: Array<{
    description?: string;
    accept: Record<string, string[]>
  }>
} | {
  method: "crossBrowser";
}`}]};var at={name:"FileSystem",exceptions:[{name:"FileSystemService",exceptions:[{code:"DKT-FT0010",exceptionText:'"accept" property in FileSystemService must be a list of valid file extensions. Value "<i>some value</i>" is not a valid extension.',description:["This exceptions is raised by the <code>requestFileUpload</code> function if the <code>accept</code> option has at least one invalid extension in the list.",'A valid extension is an extension that starts with a dot (<code>.</code>) and is followed by at least one alphanumeric character. <code>accept</code> can also take the string <code>"*"</code> as a value, meaning that any extension is accepted.']}]}]};var Rt=["*"],ot=(()=>{class n{constructor(){this.link=E.required()}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["app-see-also"]],inputs:{link:[1,"link"]},ngContentSelectors:Rt,decls:4,vars:1,consts:[[3,"href"]],template:function(a,o){a&1&&(H(),i(0,"i"),e(1," See also: "),i(2,"a",0),F(3),t()()),a&2&&(l(2),r("href",o.link(),O))},styles:["[_nghost-%COMP%]{padding-left:1.6rem;font-size:.875rem;display:block;margin-top:.375rem}"]})}}return n})();var rt=(()=>{class n{constructor(){this.FileSystemIsSupportedExampleData=pe,this.FileSystemSaveAsExampleData=ce,this.FileSystemRequestUploadExampleData=me}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["file-system-page"]],decls:111,vars:3,consts:[["pageTitle","File System Service"],["href","https://caniuse.com/native-filesystem-api"],["link","https://developer.mozilla.org/en-US/docs/Web/API/File_System_API"],["link","https://caniuse.com/mdn-api_window_showsavefilepicker"],["heading","Using isFileSystemAPISupported",3,"data"],["link","https://caniuse.com/mdn-api_window_showopenfilepicker"],["heading","Saving text to file",3,"data"],["heading","Requesting file upload",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," Service for handling file system operations, including saving, uploading, and reading files, using the File System API when available and falling back to compatible methods when necessary. "),t(),i(3,"p")(4,"strong"),e(5,"Warning!"),t(),e(6," Some features of this service are not widely available in current browsers and rely on experimental features. Fallback methods are still compatible with older browsers, though. See the "),i(7,"a",1),e(8,"caniuse.com page"),t(),e(9," for more info. "),t()(),i(10,"section")(11,"app-h2"),e(12,"Method: "),i(13,"code"),e(14,"isFileSystemAPISupported"),t()(),i(15,"p"),e(16," Checks if the File System API is supported for a specified method. This can be used to determine if the service should use the File System API or fallback methods. "),t(),i(17,"p"),e(18," Requires passing in the method to be checked - either "),i(19,"code"),e(20,"showSaveFilePicker"),t(),e(21," or "),i(22,"code"),e(23,"showOpenFilePicker"),t(),e(24,". Returns "),i(25,"code"),e(26,"true"),t(),e(27," if the method is supported on the user's browser, otherwise returns "),i(28,"code"),e(29,"false"),t(),e(30,". "),t(),i(31,"app-see-also",2),e(32," File System API on MDN Docs "),t(),i(33,"app-see-also",3),e(34," Availability Data on caniuse.com "),t(),s(35,"app-code-example",4),t(),i(36,"section")(37,"app-h2"),e(38,"Saving data to files"),t(),i(39,"p"),e(40,"If a programmatic way of letting the user download files is needed, the "),i(41,"code"),e(42,"saveAs"),t(),e(43," method can be used."),t(),i(44,"p"),e(45," This method requires two parameters: "),i(46,"code"),e(47,"data"),t(),e(48,", which is the data to be saved (either as string or a "),i(49,"code"),e(50,"Blob"),t(),e(51,"), and the "),i(52,"code"),e(53,"options"),t(),e(54," object. "),t(),i(55,"p"),e(56," Options can define which method to use for saving the file: to prefer using "),i(57,"code"),e(58,"FileSystem"),t(),e(59," API (if available), or to use the cross-browser compatible method (also used as a fallback when file system API is not available). The FileSystem method allows for more flexibility by allowing the user to choose the download location and file name before actually downloading. Additional information about the file and the starting directory can also be supplied. "),t(),i(60,"p"),e(61," The method returns a promise that resolves to "),i(62,"code"),e(63,"true"),t(),e(64," if the file was saved successfully, or "),i(65,"code"),e(66,"false"),t(),e(67," otherwise. "),t(),i(68,"app-see-also",2),e(69," File System API on MDN Docs "),t(),i(70,"app-see-also",5),e(71," Availability Data on caniuse.com "),t(),s(72,"app-code-example",6),t(),i(73,"section")(74,"app-h2"),e(75,"Requesting file upload"),t(),i(76,"p"),e(77," Opens a dialog to request file uploads, using the File System Access API if preferred and supported, or a fallback option if not. "),t(),i(78,"p"),e(79," This method takes zero or one parameter, being the options object. Options can define which method to use for requesting the file: The preferred method and additional information about the file to be uploaded. Those include allowed extensions, mime types, starting directory, is multiple files allowed, etc. "),t(),i(80,"p"),e(81," The method returns a promise that resolves to "),i(82,"code"),e(83,"File | File[] | null"),t(),e(84,", depending on the settings. "),i(85,"code"),e(86,"null"),t(),e(87," is returned if the action was unsuccessful (eg. user closed the dialog without uploading a file). "),t(),s(88,"app-code-example",7),t(),i(89,"section")(90,"app-h2"),e(91,"Reading file contents"),t(),i(92,"p"),e(93," The "),i(94,"code"),e(95,"readFile"),t(),e(96," method can be used to easily read file contents. The file can either be read as a string or an array buffer, and optionally the encoding can be specified as well. "),t(),i(97,"p"),e(98," The method takes two to three parameters: the file to be read, and the method to use to read the file (either "),i(99,"code"),e(100,'"text"'),t(),e(101," or "),i(102,"code"),e(103,'"binary"'),t(),e(104,"). If "),i(105,"code"),e(106,'"text"'),t(),e(107," was used, the encoding can also be specified ("),i(108,"code"),e(109,'"utf-8"'),t(),e(110," by default) "),t()()),a&2&&(l(35),r("data",o.FileSystemIsSupportedExampleData),l(37),r("data",o.FileSystemSaveAsExampleData),l(16),r("data",o.FileSystemRequestUploadExampleData))},dependencies:[f,h,u,ot,c,m],encapsulation:2})}}return n})();var st={name:"Hold",modules:[{name:"ArdiumHoldModule",description:"Module providing the hold directive.",exports:["ArdiumHoldDirective"]}],directives:[{name:"ArdiumHoldDirective",exportedFrom:"ArdiumHoldModule",selector:"ardHold",description:"Directive that detects when a user clicks and holds on an element.",inputs:[{name:"ardHoldDelay",type:"number-like",description:"How long, in milliseconds, will the user have to hold an element before the first event is fired.",required:!1,default:"500"},{name:"ardHoldRepeat",type:"number-like",description:"How long, in milliseconds, before repeating events are fired if the user keeps holding the element.",required:!1,default:"66.67"},{name:"ardAllowSpaceKey",type:"boolean-like",description:"If set to true, the user will be able to use the space key to trigger hold events.",required:!1,default:"false"},{name:"ardAllowEnterKey",type:"boolean-like",description:"If set to true, the user will be able to use the enter key to trigger hold events.",required:!1,default:"false"},{name:"ardHoldDisabled",type:"boolean-like",description:"If set to true, the directive will become inactive and all existing hold events will stop.",required:!1,default:"false"}],outputs:[{name:"ardHold",type:"void",description:"Fired when the user clicks and holds the target element. After the first event is fired, next ones are fired repeatedly until the user presses off the element."}]}],interfaces:[{name:"ArdHoldDefaults",description:"The default values for <code>ArdiumHoldDirective</code>.",properties:[{name:"delay",type:"number",description:"Default value for <code>ardHoldDelay</code> input."},{name:"repeat",type:"number",description:"Default value for <code>ardHoldRepeat</code> input."},{name:"allowSpaceKey",type:"boolean",description:"Default value for <code>ardAllowSpaceKey</code> input."},{name:"allowEnterKey",type:"boolean",description:"Default value for <code>ardAllowEnterKey</code> input."}]}],injectionTokens:[{name:"ARD_HOLD_DEFAULTS",type:"ArdHoldDefaults",description:"Provides default values for all inputs of <code>ArdiumHoldDirective</code>.",allOptional:!0}]};var lt=(()=>{class n{constructor(){this.HoldBasicExampleData=ue,this.HoldTimingsExampleData=he}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["hold-page"]],decls:59,vars:2,consts:[["pageTitle","Ardium Hold Directive"],["moduleName","ArdiumHoldModule"],["heading","Basic hold directive usage",3,"data"],["heading","Hold directive timings",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"code"),e(4,"ArdiumHoldDirective"),t(),e(5," is a directive that detects when a user clicks and holds on an element. It emits a customizable event, with support for specifying delays and intervals, as well as keyboard-based activation. "),t(),i(6,"p"),e(7," This directive can be used for implementing features like long-press actions or repeated execution while holding down a button. "),t()(),s(8,"app-prerequisites",1),i(9,"section")(10,"app-h2"),e(11,"Basic usage"),t(),i(12,"p"),e(13,' Enables the detection of "click-and-hold" events on an element. When the user clicks and holds, the directive emits the '),i(14,"code"),e(15,"ardHold"),t(),e(16," output at the specified interval after an initial delay. "),t(),s(17,"app-code-example",2),t(),i(18,"section")(19,"app-h2"),e(20,"Customizing the timings"),t(),i(21,"p"),e(22," The hold directive allows to customize the initial delay and interval with "),i(23,"code"),e(24,"ardHoldDelay"),t(),e(25," and "),i(26,"code"),e(27,"ardHoldRepeat"),t(),e(28," properties (in milliseconds). Any number or string-number is valid. "),t(),i(29,"p"),e(30," The delay represents the amount of milliseconds between the initial click and the first event being emitted. By default, it is 500\xA0ms. "),t(),i(31,"p"),e(32," The interval represents the amount of milliseconds between each event being emitted if the user keeps holding. By default, it is 66.67\xA0ms, or 15\xA0events per second. Any value below 4 ms will most likely be ineffective due to technical limitations. "),t(),i(33,"p"),e(34," There is an injection token "),i(35,"code"),e(36,"ARD_HOLD_DEFAULTS"),t(),e(37," available to set the default values for those and other settings for the directive. "),t(),s(38,"app-code-example",3),t(),i(39,"section")(40,"app-h2"),e(41,"Keyboard Support"),t(),i(42,"p"),e(43," The directive supports keyboard activation via the "),i(44,"code"),e(45,"Enter"),t(),e(46," and "),i(47,"code"),e(48,"Space"),t(),e(49," keys. To enable this functionality, set the "),i(50,"code"),e(51,"ardAllowSpaceKey"),t(),e(52," or "),i(53,"code"),e(54,"ardAllowEnterKey"),t(),e(55," inputs to "),i(56,"code"),e(57,"true"),t(),e(58,". "),t()()),a&2&&(l(17),r("data",o.HoldBasicExampleData),l(21),r("data",o.HoldTimingsExampleData))},dependencies:[f,h,u,b,c,m],encapsulation:2})}}return n})();var dt=(()=>{class n{constructor(){this.routeData=C()}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["devkit-home-page"]],decls:1,vars:1,consts:[["topText","Ardium UI offers a wide variety of ready-to-use abstractions to speed up your work",3,"data"]],template:function(a,o){a&1&&s(0,"app-home-page",0),a&2&&r("data",o.routeData)},dependencies:[z],encapsulation:2})}}return n})();var pt={name:"HTTP Service",interfaces:[{name:"RequestOptions",description:"Represents the options that can be passed to an HTTP request.",properties:[{name:"body",type:"any"},{name:"headers",type:"HttpHeaders | { [header: string]: string | string[] }"},{name:"context",type:"HttpContext"},{name:"observe",type:"'body' | 'events' | 'response'"},{name:"params",type:"HttpParams | { [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean> }"},{name:"reportProgress",type:"boolean"},{name:"responseType",type:"'arraybuffer' | 'blob' | 'json' | 'text'"},{name:"withCredentials",type:"boolean"},{name:"transferCache",type:"{ includeHeaders?: string[] } | boolean"}]}],types:[{name:"RequestReturnType",description:"Defines the return type of an HTTP request based on the observe and responseType properties.</p><p>This is a very complicated conditional type, but basically it encompasses all 16 possible return types of an HttpClient function into a single type.",definition:`type RequestReturnType<
  O extends RequestOptions,
  TRes = any,
> = O['observe'] extends 'body'
  ? O['responseType'] extends 'arraybuffer'
    ? ArrayBuffer
    : O['responseType'] extends 'blob'
      ? Blob
      : O['responseType'] extends 'text'
        ? string
        : TRes
  : O['observe'] extends 'response'
    ? HttpResponse<
        O['responseType'] extends 'arraybuffer'
          ? ArrayBuffer
          : O['responseType'] extends 'blob'
            ? Blob
            : O['responseType'] extends 'text'
              ? string
              : TRes
      >
    : O['observe'] extends 'events'
      ? HttpEvent<
          O['responseType'] extends 'arraybuffer'
            ? ArrayBuffer
            : O['responseType'] extends 'blob'
              ? Blob
              : O['responseType'] extends 'text'
                ? string
                : TRes
        >
      : never;`,typeParams:[{name:"O",type:"RequestOptions",description:"The request options type."},{name:"TRes",type:"any",default:"any",description:"The response data type."}]}],classes:[{name:"_HttpService",description:"Internal HTTP service class that provides methods for making various HTTP requests.",properties:[{name:"apiUrl",type:"readonly string",description:"Base URL for all requests."}],methods:[{name:"request",description:"Sends an HTTP request using the given method or HttpRequest object.",params:[{name:"methodOrReq",type:"string | HttpRequest<any>",description:"HTTP method as a string, or an HttpRequest object to be sent.",required:!0},{name:"url",type:"string",description:"The endpoint URL, used only if methodOrReq is a string."},{name:"options",type:"O",description:"Optional request options to configure the request."}],typeParams:[{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"},{name:"delete",description:"Sends a DELETE request to the specified URL.",params:[{name:"url",type:"string",description:"The endpoint URL.",required:!0},{name:"options",type:"O & { body?: TBody }",description:"Optional request options, which may include a body."}],typeParams:[{name:"TBody",type:"Object",default:"Object",description:"The body type for the DELETE request, if any."},{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"},{name:"get",description:"Sends a GET request to the specified URL.",params:[{name:"url",type:"string",description:"The endpoint URL.",required:!0},{name:"options",type:"O",description:"Optional request options to configure the request."}],typeParams:[{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"},{name:"head",description:"Sends a HEAD request to the specified URL.",params:[{name:"url",type:"string",description:"The endpoint URL.",required:!0},{name:"options",type:"O",description:"Optional request options to configure the request."}],typeParams:[{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"},{name:"jsonp",description:"Sends a JSONP request to the specified URL with the provided callback parameter.",params:[{name:"url",type:"string",description:"The resource URL to request.",required:!0},{name:"callbackParam",type:"string",description:"The name of the callback parameter in the JSONP request.",required:!0}],typeParams:[{name:"TRes",type:"Object",default:"Object",description:"The response data type."}],returnType:"Observable<TRes>"},{name:"options",description:"Sends an OPTIONS request to the specified URL.",params:[{name:"url",type:"string",description:"The endpoint URL.",required:!0},{name:"options",type:"O",description:"Optional request options to configure the request."}],typeParams:[{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"},{name:"patch",description:"Sends a PATCH request to the specified URL with the provided body.",params:[{name:"url",type:"string",description:"The endpoint URL.",required:!0},{name:"body",type:"TBody | null",description:"The resources to be updated using PATCH."},{name:"options",type:"O",description:"Optional request options to configure the request."}],typeParams:[{name:"TBody",type:"any",default:"any",description:"The type of the PATCH body content."},{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"},{name:"post",description:"Sends a POST request to the specified URL with the provided body.",params:[{name:"url",type:"string",description:"The endpoint URL.",required:!0},{name:"body",type:"TBody | null",description:"The content to be sent in the POST request."},{name:"options",type:"O",description:"Optional request options to configure the request."}],typeParams:[{name:"TBody",type:"any",default:"any",description:"The type of the POST body content."},{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"},{name:"put",description:"Sends a PUT request to the specified URL with the provided body.",params:[{name:"url",type:"string",description:"The endpoint URL.",required:!0},{name:"body",type:"TBody | null",description:"The resources to be added/updated using PUT."},{name:"options",type:"O",description:"Optional request options to configure the request."}],typeParams:[{name:"TBody",type:"any",default:"any",description:"The type of the PUT body content."},{name:"TRes",type:"Object",default:"Object",description:"The response data type."},{name:"O",type:"RequestOptions",default:"{}",description:"The request options type."}],returnType:"Observable<RequestReturnType<O, TRes>>"}]}],functions:[{name:"createHttpService",description:"Creates an HTTP service instance with a base URL and optional default request options.",params:[{name:"apiUrl",type:"string",description:"Base URL for all requests made by this service.",required:!0},{name:"defaultOptions",type:"RequestOptions",description:"Default request options merged into each request if provided."}],returnType:"_HttpService"}]};var mt={name:"HTTP",exceptions:[{name:"HttpService",exceptions:[{code:"DKT-WA0020",exceptionText:'The url "<i>url passed in</i>" passed into custom HTTP Service seems to be faulty, as it would produce a request to "<i>final url</i>". Custom HTTP Service instances prepend an API url, and thus only accept relative url paths.',description:["This exception is shown when a non-relative url is passed into a method of the HTTP Service created using <code>createHttpService</code>.","Custom HTTP Services are meant to be used together with a constant API url prepended to every request, and thus their methods only allow passing in urls relative to the API url assigned to the service."],exampleResults:[{code:`class MyHttpService extends createHttpService('https://localhost:8080/api/')

// ...

readonly http = inject(MyHttpService);

ngOnInit() {
  this.http.get('https://example.com/'); // <-- this produces the exception
}`,codeLanguage:S.TS,result:'DKT-WA0020: The url "https://example.com/" passed into custom HTTP Service seems to be faulty, as it would produce a request to "https://localhost:8080/api/https://example.com/". Custom HTTP Service instances prepend an API url, and thus only accept relative url paths.'}]}]}]};var ct=(()=>{class n{constructor(){this.language=E.required(),this.codeBefore=E(""),this.codeAfter=E(""),this.scrollSync=q(!0,{method:P.LocalStorage,name:"before-after-scroll-sync",serialize:String,deserialize:d=>d==="true"}),this.verticalLayout=q(!1,{method:P.LocalStorage,name:"before-after-vertical-layout",serialize:String,deserialize:d=>d==="true"})}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["app-code-before-after"]],inputs:{language:[1,"language"],codeBefore:[1,"codeBefore"],codeAfter:[1,"codeAfter"]},decls:3,vars:8,consts:[["textLeft","Before","textRight","After","allowScrollSync","","allowLayoutChange","",3,"scrollSyncChange","verticalLayoutChange","contentToCopyLeft","contentToCopyRight","scrollSync","verticalLayout"],["side","left","styled","false","noScroll","",3,"language","code"],["side","right","styled","false","noScroll","",3,"language","code"]],template:function(a,o){a&1&&(i(0,"app-two-pane-container",0),B("scrollSyncChange",function(T){return R(o.scrollSync,T)||(o.scrollSync=T),T})("verticalLayoutChange",function(T){return R(o.verticalLayout,T)||(o.verticalLayout=T),T}),s(1,"app-code",1)(2,"app-code",2),t()),a&2&&(r("contentToCopyLeft",o.codeBefore())("contentToCopyRight",o.codeAfter()),L("scrollSync",o.scrollSync)("verticalLayout",o.verticalLayout),l(),r("language",o.language())("code",o.codeBefore()),l(),r("language",o.language())("code",o.codeAfter()))},dependencies:[K,w],encapsulation:2})}}return n})();var ut=(()=>{class n{constructor(){this.codeBefore=`http = inject(HttpClient);

addTodo(newTodoName: string) {
  this.http.post('http://localhost:8080/api/add-todo', { name: newTodoName }, { withCredentials: true }).subscribe(/* ... */);
}
removeTodo(todoId: string) {
  this.http.delete(\`http://localhost:8080/api/todo/\${todoId}\`, { withCredentials: true }).subscribe(/* ... */);
}
updateTodo(todoId: string, newTodoName: string) {
  this.http.put(\`http://localhost:8080/api/todo/\${todoId}\`, { name: newTodoName }, { withCredentials: true }).subscribe(/* ... */);
}`,this.codeAfter=`http = inject(MyHttpService);

addTodo<{ name: string }>(newTodoName: string) {
  this.http.post('add-todo', { name: newTodoName }).subscribe(/* ... */);
}
removeTodo(todoId: string) {
  this.http.delete(\`todo/\${todoId}\`).subscribe(/* ... */);
}
updateTodo<{ name: string }>(todoId: string, newTodoName: string) {
  this.http.put(\`todo/\${todoId}\`, { name: newTodoName }).subscribe(/* ... */);
}`,this.howToCreateCode=`@Injectable({ providedIn: 'root' })
export class MyHttpService extends createHttpService('https://example.com/') {};`}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["http-service-page"]],decls:50,vars:3,consts:[["pageTitle","HTTP Service"],["href","https://angular.dev/api/common/http/HttpClient"],["language","typescript","styled","",3,"code"],["language","typescript",3,"codeBefore","codeAfter"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," An extension of the native "),i(3,"a",1)(4,"code"),e(5,"HttpClient"),t()(),e(6," with support for default options and with extended type safety. "),t()(),i(7,"section")(8,"app-h2"),e(9,"Creating an HTTP Service"),t(),i(10,"p"),e(11," Custom HTTP Services are created using the `createHttpService` function. It takes two arguments: a string containing the API url, and (optionally) default settings to be used for every request. "),t(),i(12,"p"),e(13," The function returns a class definition. To create an HTTP Service in a project, create a service that extends from the returned class definition. "),t(),s(14,"app-code",2),i(15,"p")(16,"strong"),e(17,"Note:"),t(),e(18," the native "),i(19,"code"),e(20,"HttpClient"),t(),e(21," still has to be provided with "),i(22,"code"),e(23,"provideHttpClient()"),t(),e(24,"! "),t()(),i(25,"section")(26,"app-h2"),e(27,"Why create a custom HTTP Service?"),t(),i(28,"p"),e(29," The newly created HTTP Service should be used exactly the same as the native "),i(30,"code"),e(31,"HttpClient"),t(),e(32,". All the same methods are available, but "),i(33,"code"),e(34,"POST"),t(),e(35,", "),i(36,"code"),e(37,"PUT"),t(),e(38,", and "),i(39,"code"),e(40,"PATCH"),t(),e(41," methods now support specifying the request body type through a type parameter. "),t(),i(42,"p"),e(43," The main reason to use a custom HTTP Service over "),i(44,"code"),e(45,"HttpClient"),t(),e(46," is the ability to specify the API url that will be prepended to every request, which is not easily possible with the native client. "),t(),i(47,"p"),e(48,"This is how a custom HTTP Service can improve code:"),t(),s(49,"app-code-before-after",3),t()),a&2&&(l(14),r("code",o.howToCreateCode),l(35),r("codeBefore",o.codeBefore)("codeAfter",o.codeAfter))},dependencies:[h,u,ct,w,c,m],encapsulation:2})}}return n})();var ht={name:"Infinite Scroll",modules:[{name:"ArdiumInfiniteScrollModule",description:"Module that declares and exports the ArdiumInfiniteScrollDirective.",exports:["ArdiumInfiniteScrollDirective"]}],directives:[{exportedFrom:"./infinite-scroll.directive",name:"ArdiumInfiniteScrollDirective",description:"Directive implementing infinite scroll behavior for the specified target. Emits an event when the scroll position reaches a configurable threshold.",selector:"[ardInfScroll]",inputs:[{name:"ardInfScrollThreshold",type:"number",description:"The distance in pixels from the bottom of the scrollable area at which the infinite scroll event is triggered. The value is coerced to a number.",default:"200",required:!1},{name:"ardInfScrollActive",type:"boolean",description:"Determines whether the infinite scroll functionality is active. When false, scroll events are ignored until reactivated.",default:"true",required:!1},{name:"ardInfScrollTarget",type:'"host" | "html"',description:'Specifies the element to observe for scroll events. A value of "host" observes the host element, while "html" observes the window object.',default:'"html"',required:!1}],outputs:[{name:"ardInfScrollReachThreshold",type:"void",description:"Emitted when the scroll position reaches the defined threshold, indicating that additional content may be loaded."}]}],enums:[{name:"ArdInfScrollTarget",description:'Enum for selecting the scroll event target, where "host" refers to the host element and "html" to the window object.',definition:`export const ArdInfScrollTarget = {
  Host: 'host',
  HTML: 'html',
} as const;
export type ArdInfScrollTarget = typeof ArdInfScrollTarget[keyof typeof ArdInfScrollTarget];`}],interfaces:[{name:"ArdInfiniteScrollDefaults",description:"Interface defining default configuration options for the infinite scroll directive.",properties:[{name:"threshold",type:"number",description:"The default value for <code>ardInfScrollThreshold</code> input."},{name:"target",type:"ArdInfScrollTarget",description:"The default value for <code>ardInfScrollThreshold</code> input."}]}],injectionTokens:[{name:"ARD_INFINITE_SCROLL_DEFAULTS",type:"InjectionToken<ArdInfiniteScrollDefaults>",description:"Injection token providing default configuration values for the infinite scroll directive."}]};var ft={name:"Infinite Scroll",exceptions:[{name:"ArdiumInfiniteScrollDirective",exceptions:[{code:"DKT-NF1000",exceptionText:'ardInfScroll directive has target set to "html", but the host element has just been scrolled. To ensure the directive functions properly, make the host element unscrollable.',description:['This exception is thrown if the directive has its <code>ardInfScrollTarget</code> set to <code>"html"</code>, but a scroll event on the host is detected.',"The host element should be unscrollable, and its height should fit the whole content; otherwise unexpected issues might arise."]}]}]};var yt=(()=>{class n{constructor(){this.InfiniteScrollBasicExample=fe,this.InfiniteScrollHostExample=ye}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["infinite-scroll-page"]],decls:29,vars:2,consts:[["pageTitle","Infinite Scroll"],["heading","Basic infinite scroll usage","viewInFullWindowLink","/example/devkit/infinite-scroll/basic-usage-example",3,"data"],["heading","Infite scroll listening to the host",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Infinite Scroll directive"),t(),e(5," provides infinite scroll functionality for Angular applications. It monitors a scrollable container or the window for proximity to the end and emits an event when a specified threshold is reached. "),t(),i(6,"p"),e(7," The directive is configurable via inputs to set the scroll threshold, define the scroll target, and control the active state. Upon reaching the defined threshold, an output event is emitted to signal that additional content may be loaded. "),t()(),i(8,"section")(9,"app-h2"),e(10,"Scroll Threshold and Activation"),t(),i(11,"p"),e(12," The scroll detection is governed by a configurable threshold, defined as the distance in pixels from the bottom of the scrollable area at which the directive becomes active. This value is automatically coerced into a number, ensuring consistency with the default settings. Additionally, a boolean model controls the active state of the infinite scroll functionality, allowing the scroll detection to be enabled or disabled as needed. "),t(),i(13,"p"),e(14," These configurations work in tandem to ensure that scroll events are only processed when the directive is active and when the defined threshold is met, thereby preventing unnecessary event emissions. "),t(),i(15,"app-h3"),e(16,"Event Notification Mechanism"),t(),i(17,"p"),e(18," Once the scroll position reaches the specified threshold, the directive emits an event to indicate that additional actions, such as content loading, should be initiated. This output event carries no data and serves solely as a notification. After emitting the event, the directive automatically deactivates the directive until the infinite scroll functionality is manually reactivated, ensuring controlled event handling. "),t(),s(19,"app-code-example",1),t(),i(20,"section")(21,"app-h2"),e(22,"Scroll Target Configuration"),t(),i(23,"p"),e(24," The directive supports monitoring different scroll sources. The "),i(25,"code"),e(26,"ardInfScrollTarget"),t(),e(27," option specifies whether scroll events are observed on the host element or on the global window object (default). When set to monitor the window object, the host element should remain unscrollable to avoid conflicts. When set to monitor the host object, it reacts only to the scrolling of the host element. "),t(),s(28,"app-code-example",2),t()),a&2&&(l(19),r("data",o.InfiniteScrollBasicExample),l(9),r("data",o.InfiniteScrollHostExample))},dependencies:[h,u,f,c,m,k],encapsulation:2})}}return n})();var gt={name:"Keyboard Service",services:[{name:"KeyboardService",providedIn:"root",description:"Service for handling keyboard events and shortcuts, tracking modifier key states, and providing observables for key events.",methods:[{name:"listenToShortcut",description:"Listens for a specific keyboard shortcut and returns an observable that emits when the shortcut is pressed.",params:[{name:"toMatch",type:"string[]",description:"An array of keys representing the shortcut. Case-insensitive.",required:!0},{name:"treatAltGraphAsAltPlusCtrl",type:"boolean",description:"Whether to treat AltGraph as Alt + Ctrl.",default:"true",required:!1}],returnType:"Observable<KeyboardShortcut>"},{name:"listenToKey",description:"Listens for a specific key press and returns an observable that emits when the key is pressed. Case-insensitive.",params:[{name:"code",type:"string",description:"The key code to listen for.",required:!0}],returnType:"Observable<KeyboardKey>"},{name:"listenToKeyState",description:"Listens for a specific key state change and returns an observable that emits when the key state changes. Case-insensitive.",params:[{name:"code",type:"string",description:"The key code to listen for.",required:!0}],returnType:"Observable<KeyboardKeyState>"}],properties:[{name:"isLeftCtrlHeld",type:"Signal<boolean>",description:"Indicates if the left Ctrl key is currently held down."},{name:"isRightCtrlHeld",type:"Signal<boolean>",description:"Indicates if the right Ctrl key is currently held down."},{name:"isCtrlHeld",type:"Signal<boolean>",description:"Indicates if either the left or right Ctrl key is held down."},{name:"isLeftAltHeld",type:"Signal<boolean>",description:"Indicates if the left Alt key is held down."},{name:"isRightAltHeld",type:"Signal<boolean>",description:"Indicates if the right Alt (AltGr) key is held down."},{name:"isShiftHeld",type:"Signal<boolean>",description:"Indicates if either the left or right Shift key is held down."},{name:"isLeftShiftHeld",type:"Signal<boolean>",description:"Indicates if the left Shift key is held down."},{name:"isRightShiftHeld",type:"Signal<boolean>",description:"Indicates if the right Shift key is held down."},{name:"isLeftMetaHeld",type:"Signal<boolean>",description:"Indicates if the left Meta (Windows/Command) key is held down."},{name:"isRightMetaHeld",type:"Signal<boolean>",description:"Indicates if the right Meta (Windows/Command) key is held down."},{name:"isMetaHeld",type:"Signal<boolean>",description:"Indicates if either the left or right Meta (Windows/Command) key is held down."},{name:"capsLockState",type:"Signal<boolean | undefined>",description:"Indicates whether Caps Lock is enabled."},{name:"numLockState",type:"Signal<boolean | undefined>",description:"Indicates whether Num Lock is enabled."},{name:"scrollLockState",type:"Signal<boolean | undefined>",description:"Indicates whether Scroll Lock is enabled."},{name:"anyShortcut$",type:"Observable<KeyboardShortcut>",description:"Observable that emits when any registered shortcut is triggered."},{name:"anyKeyPress$",type:"Observable<KeyboardKey>",description:"Observable that emits when any key is pressed."},{name:"anyKeyState$",type:"Observable<KeyboardKeyState>",description:"Observable that emits when any key state changes."}]}],types:[{name:"KeyboardShortcut",definition:`export type KeyboardShortcut = {
  keys: string[];
  event: KeyboardEvent;
};`,description:"Represents a keyboard shortcut event, containing the keys involved and the event object."},{name:"KeyboardKey",definition:`export type KeyboardKey = {
  key: string;
  event: KeyboardEvent;
};`,description:"Represents a key press event, containing the key pressed and the event object."},{name:"KeyboardKeyState",definition:`export type KeyboardKeyState = {
  key: string;
  isHeld: boolean;
  event: KeyboardEvent;
};`,description:"Represents a key state event, indicating whether the key is held down and the event object."}]};var xt={name:"Keyboard Service",exceptions:[{name:"KeyboardService",exceptions:[{code:"DKT-NF0031",exceptionText:'A keyboard shortcut definition cannot contain two final keys. Got "<i>key1</i>" and "<i>key2</i>"; only the first one will be included.',description:["This exception is thrown when a keyboard shortcut definition includes multiple final keys, which is not allowed.","Only one final key can be part of a shortcut definition, and additional keys will be ignored."],exampleResults:[{code:"this.listenToShortcut(['Ctrl', 'A', 'B']);",codeLanguage:S.TS,result:'DKT-NF0031: A keyboard shortcut definition cannot contain two final keys. Got "A" and "B"; only the first one will be included.'}]},{code:"DKT-NF0032",exceptionText:"A keyboard shortcut definition that treats AltGraph as Alt+Ctrl cannot expect the user to press AltGraph and ControlRight keys (while not pressing ControlLeft), as pressing AltGraph automatically presses ControlLeft.",description:["This exception occurs when a keyboard shortcut definition expects both AltGraph and ControlRight without ControlLeft, which is not possible.",'Since pressing AltGraph automatically activates ControlLeft, such a configuration is invalid. Listen to <code>"Ctrl"</code> instead (although listening to just AltGraph is usually enough).'],exampleResults:[{code:"this.listenToShortcut(['AltGraph', 'ControlRight']);",codeLanguage:S.TS,result:"DKT-NF0032: A keyboard shortcut definition that treats AltGraph as Alt+Ctrl cannot expect the user to press AltGraph and ControlRight keys (while not pressing ControlLeft), as pressing AltGraph automatically presses ControlLeft."}]}]}]};var vt=(()=>{class n{constructor(){this.KeyboardServiceListenToKeyExample=ge,this.KeyboardServiceListenToShortcutExample=ve,this.KeyboardServiceListenToKeyStateExample=xe,this.KeyboardServiceModifierKeyStateExample=Se}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["keyboard-service-page"]],decls:201,vars:4,consts:[["pageTitle","Keyboard Service"],["href","https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_code_values","target","_blank"],["heading","Listening to a Key Press","displayWhenSimple","",3,"data"],["heading","Listening to a Keyboard Shortcut","displayWhenSimple","",3,"data"],["heading","Listening to Key State Changes","displayWhenSimple","",3,"data"],["heading","Checking Modifier Key States",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"KeyboardService"),t(),e(5," provides a robust system for handling keyboard events. It captures and manages key states, listens for keyboard shortcuts, and emits events for specific key presses and combinations. "),t(),i(6,"p"),e(7," This service supports tracking modifier keys like Control, Alt, Shift, and Meta, as well as custom shortcuts. It provides observables for listening to individual key presses, shortcut combinations, and key state changes, making it ideal for implementing keyboard-driven functionality. "),t()(),i(8,"section")(9,"app-h2"),e(10,"Listening To Key Presses"),t(),i(11,"p"),e(12," The service listens globally to "),i(13,"code"),e(14,"keydown"),t(),e(15,", "),i(16,"code"),e(17,"keyup"),t(),e(18,", and "),i(19,"code"),e(20,"blur"),t(),e(21," events from the document and window. When a key is pressed or released, the corresponding event is captured and processed. "),t(),i(22,"p"),e(23," Use "),i(24,"code"),e(25,"listenToKey"),t(),e(26," method to listen to a specific key. It takes the name of the key (see "),i(27,"a",1),e(28," a list of supported names"),t(),e(29,", some aliases are available too). It returns an observable that emits the key code and keyboard event every time the key is pressed down. "),t(),i(30,"p"),e(31," This method, as well as all other methods exposed by the service, treats key codes as case-insensitive and removes any non-alphanumeric characters. For example, the code "),i(32,"code"),e(33,"_NuMpAd EnTeR!"),t(),e(34," still resolves to "),i(35,"code"),e(36,"NumpadEnter"),t(),e(37,". "),t(),s(38,"app-code-example",2),t(),i(39,"section")(40,"app-h2"),e(41,"Listening to Keyboard Shortcuts"),t(),i(42,"p"),e(43," Use "),i(44,"code"),e(45,"listenToShortcut"),t(),e(46," method to listen to a keyboard shortcut. It takes an array of key names that make up the shortcut, and returns an observable that emits the keyboard shortcut array and the keyboard event every time the specified keys are pressed at the same time. "),t(),i(47,"p"),e(48,"This feature is particularly useful for implementing custom keyboard shortcuts in applications."),t(),i(49,"p")(50,"strong"),e(51,"Note:"),t(),e(52," modifier keys in the shortcut can be configured to allow only left, only right, or any modifier key (eg. "),i(53,"code"),e(54,"ControlLeft"),t(),e(55," and "),i(56,"code"),e(57,"ControlRight"),t(),e(58," for left and right Ctrl keys respectively, or just "),i(59,"code"),e(60,"Control"),t(),e(61," to allow any of the two). The Alt key is an exception, where just "),i(62,"code"),e(63,"Alt"),t(),e(64," translates to "),i(65,"code"),e(66,"AltLeft"),t(),e(67,". "),t(),s(68,"app-code-example",3),t(),i(69,"section")(70,"app-h2"),e(71,"Listening to Key State Changes"),t(),i(72,"p"),e(73," Use "),i(74,"code"),e(75,"listenToKeyState"),t(),e(76," method to listen to the changes in state of a specific key. It takes the key name, and returns an observable that emits the key name, current state, and the keyboard event every time the specified key is pressed or released. "),t(),i(77,"p"),e(78," This allows for tracking when a key is held down or released, useful for features like game controls or continuous input actions. "),t(),s(79,"app-code-example",4),t(),i(80,"section")(81,"app-h2"),e(82,"Modifier Key Tracking"),t(),i(83,"p"),e(84," The service actively tracks the state of modifier keys including Shift, Control, Alt, and Meta (Windows key on Windows, Command on Mac) on both sides separately, as well as whether lock keys including CapsLock, NumLock, and ScrollLock are currently active. Each modifier has a dedicated signal that indicates whether the key is currently held. "),t(),i(85,"p")(86,"strong"),e(87,"Note:"),t(),e(88," the CapsLock, NumLock, and ScrollLock signals have "),i(89,"code"),e(90,"undefined"),t(),e(91," value by default. Due to technical limitations, it is updated only when the user presses any key on their keyboard. "),t(),s(92,"app-code-example",5),t(),i(93,"section")(94,"app-h2"),e(95,"Supported Key Aliases"),t(),i(96,"p"),e(97,"The service supports the following key aliases in all its methods:"),t(),i(98,"ul")(99,"li")(100,"code"),e(101,"A"),t(),e(102,", ..., "),i(103,"code"),e(104,"Z"),t(),e(105," \u2013 aliases for "),i(106,"code"),e(107,"KeyA"),t(),e(108," to "),i(109,"code"),e(110,"KeyZ"),t()(),i(111,"li")(112,"code"),e(113,"0"),t(),e(114,", ..., "),i(115,"code"),e(116,"9"),t(),e(117," \u2013 aliases for "),i(118,"code"),e(119,"Digit0"),t(),e(120," to "),i(121,"code"),e(122,"Digit9"),t(),e(123," (these represent the top row of numbers, not the numpad!) "),t(),i(124,"li")(125,"code"),e(126,"Ctrl"),t(),e(127,", "),i(128,"code"),e(129,"CtrlLeft"),t(),e(130,", "),i(131,"code"),e(132,"CtrlRight"),t(),e(133," \u2013 aliases for "),i(134,"code"),e(135,"Control"),t(),e(136,", "),i(137,"code"),e(138,"ControlLeft"),t(),e(139,", "),i(140,"code"),e(141,"ControlRight"),t()(),i(142,"li")(143,"code"),e(144,"Win"),t(),e(145," or "),i(146,"code"),e(147,"Windows"),t(),e(148," or "),i(149,"code"),e(150,"Cmd"),t(),e(151," \u2013 aliases for "),i(152,"code"),e(153,"Meta"),t()(),i(154,"li")(155,"code"),e(156,"Alt"),t(),e(157," \u2013 alias for "),i(158,"code"),e(159,"AltLeft"),t()(),i(160,"li")(161,"code"),e(162,"AltGr"),t(),e(163," or "),i(164,"code"),e(165,"AltGraph"),t(),e(166," \u2013 aliases for "),i(167,"code"),e(168,"AltRight"),t()(),i(169,"li")(170,"code"),e(171,"Left"),t(),e(172,", "),i(173,"code"),e(174,"Right"),t(),e(175,", "),i(176,"code"),e(177,"Up"),t(),e(178,", "),i(179,"code"),e(180,"Down"),t(),e(181," \u2013 aliases for "),i(182,"code"),e(183,"ArrowLeft"),t(),e(184,", "),i(185,"code"),e(186,"ArrowRight"),t(),e(187,", etc. "),t()()(),i(188,"section")(189,"app-h2"),e(190,"Lifecycle Management"),t(),i(191,"p"),e(192," The service implements the "),i(193,"code"),e(194,"OnDestroy"),t(),e(195," lifecycle hook to automatically clean up event listeners when the service is destroyed; all associated listener observables are destroyed with it. "),t(),i(196,"p"),e(197," If however the service is not destroyed, but the component listening to the service "),i(198,"i"),e(199,"is"),t(),e(200," destroyed, the observables will keep emitting. In this case, remember to unsubscribe from them manually. "),t()()),a&2&&(l(38),r("data",o.KeyboardServiceListenToKeyExample),l(30),r("data",o.KeyboardServiceListenToShortcutExample),l(11),r("data",o.KeyboardServiceListenToKeyStateExample),l(13),r("data",o.KeyboardServiceModifierKeyStateExample))},dependencies:[h,u,f,c,m],encapsulation:2})}}return n})();var St={name:"Relative Pos",classes:[{name:"EventRelativePos",description:"Class representing the position of an event relative to a target element. It also determines whether the event position overflows the boundaries of the target element.",typeParams:[{name:"T",type:"HTMLElement",description:"The type of the target HTML element."}],properties:[{name:"target",type:"T",description:"The target element relative to which the event position is calculated."},{name:"top",type:"number",description:"The distance from the top of the target element to the event position."},{name:"right",type:"number",description:"The distance from the event position to the right edge of the target element."},{name:"bottom",type:"number",description:"The distance from the event position to the bottom of the target element."},{name:"left",type:"number",description:"The distance from the left edge of the target element to the event position."},{name:"overflowsTop",type:"boolean",description:"Indicates whether the event position overflows beyond the top of the target element."},{name:"overflowsRight",type:"boolean",description:"Indicates whether the event position overflows beyond the right side of the target element."},{name:"overflowsBottom",type:"boolean",description:"Indicates whether the event position overflows beyond the bottom of the target element."},{name:"overflowsLeft",type:"boolean",description:"Indicates whether the event position overflows beyond the left side of the target element."},{name:"overflows",type:"boolean",description:"Indicates whether the event position overflows any side of the target element."}],methods:[{name:"valueOf",returnType:"{ top: number; right: number; bottom: number; left: number; }",description:"Returns an object representation of the event relative position values."},{name:"toJSON",returnType:"string",description:"Returns a JSON string representation of the event relative position values. Basically takes the output of the <code>valueOf</code> method and stringifies it."},{name:"toString",returnType:"string",description:"Alias of the <code>toJSON</code> method."}]}],functions:[{name:"getEventRelativePos",description:"Computes the position of an event relative to a target element and returns an instance of <code>EventRelativePos</code>.",params:[{name:"event",type:"MouseEvent | TouchEvent | Touch",description:"The event whose position is being determined."},{name:"el",type:"T | ElementRef<T>",description:"The target element or an ElementRef to the target element."}],returnType:"EventRelativePos<T>"}]};var bt={name:"Relative Pos",exceptions:[{name:"getEventRelativePos",exceptions:[{code:"DKT-FT9000",exceptionText:"DKT-FT9000: Cannot read event position. The TouchEvent has no Touch instances.",description:["This exception occurs when attempting to get the event position from a <code>TouchEvent</code> that contains no <code>Touch</code> instances.","The function <code>getEventRelativePos</code> expects at least one touch point in the event, but if none are available, it cannot determine a position and throws this error."]}]}]};var Tt=(()=>{class n{constructor(){this.RelativePosBasicExample=be}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["relative-pos-page"]],decls:40,vars:1,consts:[["pageTitle","Relative Pos"],["heading","Computing relative position","initialTab","ts",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"EventRelativePos"),t(),e(5," class calculates the relative position of a pointer event (mouse or touch) within an HTML element. It determines whether the event overflows beyond the element\u2019s boundaries and provides an easy-to-use interface for accessing this data. "),t()(),i(6,"section")(7,"app-h2"),e(8,"Calculating Relative Position"),t(),i(9,"p"),e(10," The class computes the relative position of an event based on its coordinates in relation to an element\u2019s bounding rectangle. The result is represented with the "),i(11,"code"),e(12,"top"),t(),e(13,", "),i(14,"code"),e(15,"right"),t(),e(16,", "),i(17,"code"),e(18,"bottom"),t(),e(19,", and "),i(20,"code"),e(21,"left"),t(),e(22," properties, which indicate how far the event occurred from each respective edge of the element. "),t(),i(23,"p"),e(24," Additionally, boolean properties such as "),i(25,"code"),e(26,"overflowsTop"),t(),e(27," or "),i(28,"code"),e(29,"overflowsRight"),t(),e(30," indicate whether the event is outside the element\u2019s boundaries in a specific direction. "),t(),i(31,"p"),e(32," The overflow properties provide insight into whether an event is outside the element's boundaries. The "),i(33,"code"),e(34,"overflows"),t(),e(35," property is a combined check that returns "),i(36,"code"),e(37,"true"),t(),e(38," if the event position extends beyond any of the four edges. "),t(),s(39,"app-code-example",1),t()),a&2&&(l(39),r("data",o.RelativePosBasicExample))},dependencies:[h,u,f,c,m],encapsulation:2})}}return n})();var Et={name:"Viewport Observer",services:[{name:"ArdiumViewportObserverService",description:"Service for observing the visibility of elements within the viewport.",providedIn:"root",methods:[{name:"setScrollHost",description:"Sets the element that will trigger the viewport observation (e.g., document or custom element).",params:[{name:"element",type:"HTMLElement | Document",description:"The element or document to observe for scroll events.",required:!0}],returnType:"void"},{name:"observeElement",description:"Observes an element and tracks its visibility within the viewport, based on the provided configuration.",params:[{name:"element",type:"HTMLElement | ElementRef<HTMLElement>",description:"The target element to observe.",required:!0},{name:"config",type:"Partial<ArdViewportObserverConfig>",description:"Optional configuration to override default settings for the observer.",required:!1}],returnType:"ArdViewportObserverRef"},{name:"observeById",description:"Observes an element by its ID and tracks its visibility within the viewport.",params:[{name:"id",type:"string",description:"The ID of the element to observe.",required:!0},{name:"config",type:"Partial<ArdViewportObserverConfig>",description:"Optional configuration to override default settings for the observer.",required:!1}],returnType:"ArdViewportObserverRef"},{name:"observeByQuery",description:"Observes an element using a CSS selector and tracks its visibility within the viewport.",params:[{name:"query",type:"string",description:"The CSS selector to target the element to observe.",required:!0},{name:"config",type:"Partial<ArdViewportObserverConfig>",description:"Optional configuration to override default settings for the observer.",required:!1}],returnType:"ArdViewportObserverRef"},{name:"recheckAll",description:"Rechecks the visibility of all observed elements.",params:[],returnType:"void"}]}],enums:[{name:"ViewportRelation",description:"Enum describing the relationship of an element to the viewport.",definition:`export enum ViewportRelation {
  Above = 'above',
  PartiallyAbove = 'partially-above',
  Inside = 'inside',
  PartiallyBelow = 'partially-below',
  Below = 'below',
  InsideButTooLarge = 'inside-too-large',
  Undefined = 'undefined',
}`}],interfaces:[{name:"ArdViewportObserverConfig",description:"Configuration interface for the ArdiumViewportObserverService.",properties:[{name:"margin",type:"number | RequireAtLeastOne<{ top: number; bottom: number }>",description:"Defines the margin values to adjust the viewport observation."},{name:"throttleTime",type:"number",description:"Time (in milliseconds) to throttle updates during scrolling or resizing events."}]},{name:"ArdViewportObserverDefaults",description:"Interface that extends ArdViewportObserverConfig and provides default values.",properties:[{name:"margin",type:"Required<Exclude<ArdViewportObserverConfig['margin'], undefined>>",description:"The default margin settings for the viewport observer."},{name:"throttleTime",type:"number",description:"The default throttle time in milliseconds."}]}],classes:[{name:"ArdViewportObserverRef",description:"Reference class representing an observed element in the viewport.",properties:[{name:"element",type:"HTMLElement",description:"The observed element."},{name:"margins",type:"Readonly<{ top: Signal<number>; bottom: Signal<number> }>",description:"The margins (top and bottom) for the observed element."},{name:"position",type:"Signal<{ top: number; bottom: number } | undefined>",description:"The position of the element relative to the viewport."},{name:"viewportRelation",type:"Signal<ViewportRelation | undefined>",description:"The relationship of the element to the viewport (e.g., inside, above, below)."},{name:"isInViewport",type:"Signal<boolean | undefined>",description:"Indicates whether the element is in the viewport based on the current relation."},{name:"isDestroyed",type:"ReadonlySignal<boolean>",description:"Indicates if the observer reference has been destroyed."}],methods:[{name:"recheck",description:"Recalculates the position and viewport relation of the observed element.",params:[],returnType:"void"},{name:"destroy",description:"Destroys the observer reference and unsubscribes from all subscriptions.",params:[],returnType:"void"},{name:"setMargin",description:"Sets the margin for the observed element and recalculates the position.",overloads:[{description:"Sets the top and bottom margins to the same value.",params:[{name:"topAndBottom",type:"number",description:"Sets the top and bottom margins to the same value.",required:!0}],returnType:"void"},{description:"Sets the top and bottom margins to two different values.",params:[{name:"top",type:"number",description:"The top margin.",required:!1},{name:"bottom",type:"number",description:"The bottom margin.",required:!1}],returnType:"void"}]}]}],constants:[{name:"ARD_VIEWPORT_OBSERVER_DEFAULTS",type:"InjectionToken<ArdViewportObserverDefaults>",description:"Injection token for the default configuration of the viewport observer service."}],functions:[{name:"provideViewportObserverDefaults",description:"A function to provide custom default configuration for the ArdiumViewportObserverService via dependency injection.",params:[{name:"config",type:"Partial<ArdViewportObserverDefaults>",description:"A partial configuration object to override the default values for the viewport observer.",required:!0}],returnType:"Provider"}]};var wt={name:"Viewport Observer",exceptions:[{name:"ArdiumViewportObserverService",exceptions:[{code:"DKT-NF0001",exceptionText:'Trying to observe an element by id, but the element with id "<i>id</i>" does not exist.',description:["This exception is thrown when the method <code>observeById</code> is called with an <i>id</i> that does not match any element in the document.","The service attempts to observe an element by its id but fails if no such element is found in the DOM."],exampleResults:[{code:`const viewportService = inject(ArdiumViewportObserverService);

const observer = viewportService.observeById('non-existent-id'); // <-- this produces the exception
`,codeLanguage:S.TS,result:'DKT-NF0001: Trying to observe an element by id, but the element with id "non-existent-id" does not exist.'}]},{code:"DKT-NF0002",exceptionText:'Trying to observe an element by query, but no element matching "<i>query</i>" exists.',description:["This exception is thrown when the method <code>observeByQuery</code> is called with a <i>query</i> that does not match any element in the document.","The service attempts to observe an element by its query selector but fails if no such element is found in the DOM."],exampleResults:[{code:`const viewportService = inject(ArdiumViewportObserverService);

const observer = viewportService.observeByQuery('.non-existent-class'); // <-- this produces the exception
`,codeLanguage:S.TS,result:'DKT-NF0002: Trying to observe an element by query, but no element matching ".non-existent-class" exists.'}]}]}]};var kt=(()=>{class n{constructor(){this.ObserverRefExampleData=Te}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=p({type:n,selectors:[["viewport-observer-page"]],decls:143,vars:1,consts:[["pageTitle","Viewport Observer"],["heading","Basic observer ref usage",3,"data"]],template:function(a,o){a&1&&(i(0,"app-introduction",0)(1,"p"),e(2," The "),i(3,"strong"),e(4,"Viewport Observer"),t(),e(5," tracks element visibility within the viewport. It listens for scroll events on a specified host element and notifies registered observers when elements enter or leave the viewport. "),t(),i(6,"p"),e(7," Observers can be registered by passing an element, searching by ID, or using a query selector. The observer can be configured with margin and throttling options for fine-tuned behavior. "),t()(),i(8,"section")(9,"app-h2"),e(10,"About Viewport Observers"),t(),i(11,"p"),e(12," Viewport observers track an element\u2019s position relative to the viewport, specifically whether the element is inside or outside it. "),t(),i(13,"p"),e(14,"Use the Viewport Observer service to register new observers:"),t(),i(15,"ul")(16,"li")(17,"code"),e(18,"observeElement"),t(),e(19," \u2014 observes a given "),i(20,"code"),e(21,"HTMLElement"),t(),e(22," or "),i(23,"code"),e(24,"ElementRef"),t()(),i(25,"li")(26,"code"),e(27,"observeById"),t(),e(28," \u2014 observes the first element with the provided ID"),t(),i(29,"li")(30,"code"),e(31,"observeByQuery"),t(),e(32," \u2014 observes the first element matching the provided CSS selector"),t()(),i(33,"p"),e(34," These methods should be called after the view element is initialized. The service doesn\u2019t check for this automatically. All methods return an "),i(35,"code"),e(36,"ArdViewportObserverRef"),t(),e(37," instance, which exposes further reactive options. "),t()(),i(38,"section")(39,"app-h2"),e(40,"Using "),i(41,"code"),e(42,"ArdViewportObserverRef"),t()(),i(43,"p"),e(44," The "),i(45,"code"),e(46,"ArdViewportObserverRef"),t(),e(47," class represents an individual viewport observer instance. It has a "),i(48,"code"),e(49,"viewportRelation"),t(),e(50," property, which returns the current viewport relation. Possible values include: "),t(),i(51,"ul")(52,"li")(53,"code"),e(54,"ViewportRelation.Above"),t(),e(55," \u2014 element is fully above the viewport."),t(),i(56,"li")(57,"code"),e(58,"ViewportRelation.PartiallyAbove"),t(),e(59," \u2014 element is partially above, partially inside the viewport."),t(),i(60,"li")(61,"code"),e(62,"ViewportRelation.Inside"),t(),e(63," \u2014 element is fully inside the viewport."),t(),i(64,"li")(65,"code"),e(66,"ViewportRelation.PartiallyBelow"),t(),e(67," \u2014 element is partially below, partially inside the viewport."),t(),i(68,"li")(69,"code"),e(70,"ViewportRelation.Below"),t(),e(71," \u2014 element is fully below the viewport."),t()(),i(72,"p"),e(73,"Additionally, there are two special relations:"),t(),i(74,"ul")(75,"li")(76,"code"),e(77,"ViewportRelation.InsideButTooLarge"),t(),e(78," \u2014 element is too large to fit entirely within the viewport."),t(),i(79,"li")(80,"code"),e(81,"ViewportRelation.Undefined"),t(),e(82," \u2014 element's position hasn't been checked yet (only immediately after creating the observer). "),t()(),i(83,"p"),e(84," There is a shorthand signal "),i(85,"code"),e(86,"isInViewport"),t(),e(87,", which returns "),i(88,"code"),e(89,"true"),t(),e(90," if the element is at least partially within the viewport. "),t(),s(91,"app-code-example",1),i(92,"app-h3"),e(93,"When are values updated?"),t(),i(94,"p"),e(95," The service updates all registered observers when the page is scrolled or the window is resized. By default, it listens for scroll events on the "),i(96,"code"),e(97,"document"),t(),e(98," element. This can be changed using the "),i(99,"code"),e(100,"setScrollHost"),t(),e(101," method, which takes an "),i(102,"code"),e(103,"HTMLElement"),t(),e(104,". This change is only necessary if the "),i(105,"code"),e(106,"document"),t(),e(107," is unscrollable, as it may produce incorrect results. "),t(),i(108,"p"),e(109," To manually update all observer values, use the "),i(110,"code"),e(111,"recheckAll()"),t(),e(112," method. Alternatively, use the "),i(113,"code"),e(114,"recheck()"),t(),e(115," method on individual observers. "),t(),i(116,"app-h3"),e(117,"Destroying an Observer"),t(),i(118,"p"),e(119," To stop an observer from reacting to events, use the "),i(120,"code"),e(121,"destroy()"),t(),e(122," method on its reference. The "),i(123,"code"),e(124,"isDestroyed"),t(),e(125," signal indicates whether the ref has been destroyed. "),t(),i(126,"p"),e(127,"When the service is destroyed, all registered observers are automatically destroyed."),t()(),i(128,"section")(129,"app-h2"),e(130,"Further Configuration"),t(),i(131,"app-h3"),e(132,"Margins"),t(),i(133,"p"),e(134," Margins define how close an element must be to the viewport to be considered visible. They can be specified as a single value or separate values for top and bottom. Positive values shrink the viewport (elements may still be visible, but treated as outside the viewport). Negative values extend the viewport beyond the visible area. "),t(),i(135,"p"),e(136," Margins can be set when registering the listener, through the optional options object, or updated later using the observer ref methods. "),t(),i(137,"app-h3"),e(138,"Throttling"),t(),i(139,"p"),e(140," Throttling limits how often scroll events are processed, improving performance when dealing with multiple observers. By default, throttling is set to 100 ms. "),t(),i(141,"p"),e(142,"Throttling is configured during listener registration using the options object."),t()()),a&2&&(l(91),r("data",o.ObserverRefExampleData))},dependencies:[h,u,f,c,m,k],encapsulation:2})}}return n})();var C=()=>[g("coercion","Coercion","Utility functions for coercing inputs into specific types",Ce,ke),g("click-outside","Click outside","Directive that fires an event when clicked outside an element",we,Ee),g("array-signal","Array Signal","Signal for working with arrays",De,Ae,void 0,void 0,"Custom Signals"),g("counter-signal","Counter Signal","Signal allowing to increment and decrement its value",Pe,Re,void 0,void 0,"Custom Signals"),g("map-signal","Map Signal","Signal allowing to increment and decrement its value",Oe,Ie,void 0,void 0,"Custom Signals"),g("queue-signal","Queue Signal","Signal allowing to increment and decrement its value",Ve,Ue,void 0,void 0,"Custom Signals"),g("stack-signal","Stack Signal","Signal allowing to increment and decrement its value",_e,We,void 0,void 0,"Custom Signals"),g("set-signal","Set Signal","Signal allowing to increment and decrement its value",Ne,je,void 0,void 0,"Custom Signals"),g("tuple-signal","Tuple Signal","Signal synced with local storage, session storage, or cookies",Je,$e,void 0,void 0,"Custom Signals"),g("persistent-signal","Persistent Signal","Signal synced with local storage, session storage, or cookies",Le,He,Fe,void 0,"Custom Signals"),g("query-param-signal","Query Param Signal","Signal synced with a URL query parameter",ze,Be,Ke,void 0,"Custom Signals"),g("debounced-signal","Debounced Signal","Signal that delays updates to reduce frequency of changes",Me,qe,void 0,void 0,"Custom Signals"),g("throttled-signal","Throttled Signal","Signal that limits updates to one per throttle interval",Ge,Qe,void 0,void 0,"Custom Signals"),g("dom-boxes","DOM Boxes","Functions similar to getClientBoundingRect",Ze,Xe),g("escape-html","Escape HTML","Pipe and function for escaping HTML and XML code",et,Ye),g("file-pipes","File pipes","Set of pipes for displaying information about a File",it,tt),g("file-system","File System","Service for downloading files and asking the user to upload files",rt,nt,at),g("hold","Hold","Directive that fires an event when user holds down a click",lt,st),g("http-service","HTTP Service","Extension of HTTP Client with support for default options",ut,pt,mt),g("infinite-scroll","Infinite scroll","Directive for building infinite scroll containers",yt,ht,ft),g("keyboard-service","Keyboard service","Service for detecting key presses and keyboard shortcuts",vt,gt,xt),g("relative-pos","Relative pos","Get click position relative to an element",Tt,St,bt),g("viewport-observer","Viewport observer","Observe elements' positions relative to the viewport",kt,Et,wt)],Fo=[{path:"",component:dt,title:"Devkit :: Ardium UI Docs"},...C().map(n=>D(A({},n),{title:`${n.name} :: Ardium UI Docs`,path:n.groupName?`${(0,I.kebab)(n.groupName)}/${n.path}`:n.path}))];console.log(C().map(n=>D(A({},n),{title:`${n.name} :: Ardium UI Docs`,path:n.groupName?`${(0,I.kebab)(n.groupName)}/${n.path}`:n.path})));export{C as a,Fo as b};
